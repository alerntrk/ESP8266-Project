
FreeRTOS_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005724  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058f4  080058f4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080058f4  080058f4  000158f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058fc  080058fc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058fc  080058fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005900  08005900  00015900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012ea4  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012eb8  20012eb8  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000138e0  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bac  00000000  00000000  00033924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001148  00000000  00000000  000364d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001040  00000000  00000000  00037618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022885  00000000  00000000  00038658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013cab  00000000  00000000  0005aedd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4188  00000000  00000000  0006eb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142d10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004864  00000000  00000000  00142d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800589c 	.word	0x0800589c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800589c 	.word	0x0800589c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <task1_handler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void task1_handler(void* parameters)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]


	while(1)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80004dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <task1_handler+0x1c>)
 80004e2:	f000 ffce 	bl	8001482 <HAL_GPIO_TogglePin>
		vTaskDelay(configTICK_RATE_HZ);
 80004e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004ea:	f003 fce3 	bl	8003eb4 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80004ee:	e7f5      	b.n	80004dc <task1_handler+0x8>
 80004f0:	40020c00 	.word	0x40020c00

080004f4 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Receive(&huart3, RX_BUFFER,3, 1000);
 80004fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000500:	2203      	movs	r2, #3
 8000502:	4902      	ldr	r1, [pc, #8]	; (800050c <task2_handler+0x18>)
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <task2_handler+0x1c>)
 8000506:	f001 ff9c 	bl	8002442 <HAL_UART_Receive>
 800050a:	e7f7      	b.n	80004fc <task2_handler+0x8>
 800050c:	200000b8 	.word	0x200000b8
 8000510:	20000074 	.word	0x20000074

08000514 <HAL_UART_RxCpltCallback>:

}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]

		HAL_UART_Receive_IT(&huart3, RX_BUFFER, 1);
 800051c:	2201      	movs	r2, #1
 800051e:	4904      	ldr	r1, [pc, #16]	; (8000530 <HAL_UART_RxCpltCallback+0x1c>)
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <HAL_UART_RxCpltCallback+0x20>)
 8000522:	f002 f830 	bl	8002586 <HAL_UART_Receive_IT>

}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	200000b8 	.word	0x200000b8
 8000534:	20000074 	.word	0x20000074

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fc35 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f839 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f8f5 	bl	8000734 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800054a:	f000 f89f 	bl	800068c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800054e:	f000 f8c7 	bl	80006e0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
 // HAL_UART_Receive_IT(&huart2, RX_BUFFER, 1);



  status = xTaskCreate(task1_handler, "Task-1", 200, NULL, 2, &task1_handle);
 8000552:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <main+0x68>)
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2302      	movs	r3, #2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	22c8      	movs	r2, #200	; 0xc8
 800055e:	4911      	ldr	r1, [pc, #68]	; (80005a4 <main+0x6c>)
 8000560:	4811      	ldr	r0, [pc, #68]	; (80005a8 <main+0x70>)
 8000562:	f003 fb2b 	bl	8003bbc <xTaskCreate>
 8000566:	6078      	str	r0, [r7, #4]

  configASSERT(status == pdPASS);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d00a      	beq.n	8000584 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800056e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000572:	f383 8811 	msr	BASEPRI, r3
 8000576:	f3bf 8f6f 	isb	sy
 800057a:	f3bf 8f4f 	dsb	sy
 800057e:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000580:	bf00      	nop
 8000582:	e7fe      	b.n	8000582 <main+0x4a>

  status = xTaskCreate(task2_handler, "Task-2", 200, NULL, 2, &task2_handle);
 8000584:	4b09      	ldr	r3, [pc, #36]	; (80005ac <main+0x74>)
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2302      	movs	r3, #2
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2300      	movs	r3, #0
 800058e:	22c8      	movs	r2, #200	; 0xc8
 8000590:	4907      	ldr	r1, [pc, #28]	; (80005b0 <main+0x78>)
 8000592:	4808      	ldr	r0, [pc, #32]	; (80005b4 <main+0x7c>)
 8000594:	f003 fb12 	bl	8003bbc <xTaskCreate>
 8000598:	6078      	str	r0, [r7, #4]


  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800059a:	f003 fcbf 	bl	8003f1c <vTaskStartScheduler>
  //HAL_UART_Receive_IT(&huart3, RX_BUFFER, 1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059e:	e7fe      	b.n	800059e <main+0x66>
 80005a0:	200000bc 	.word	0x200000bc
 80005a4:	080058b4 	.word	0x080058b4
 80005a8:	080004d5 	.word	0x080004d5
 80005ac:	200000c0 	.word	0x200000c0
 80005b0:	080058bc 	.word	0x080058bc
 80005b4:	080004f5 	.word	0x080004f5

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 f960 	bl	800588c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a27      	ldr	r2, [pc, #156]	; (8000684 <SystemClock_Config+0xcc>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b25      	ldr	r3, [pc, #148]	; (8000684 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <SystemClock_Config+0xd0>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2310      	movs	r3, #16
 800061e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000628:	2308      	movs	r3, #8
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800062c:	2332      	movs	r3, #50	; 0x32
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000630:	2304      	movs	r3, #4
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000634:	2307      	movs	r3, #7
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f000 ff3b 	bl	80014b8 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000648:	f000 f9e4 	bl	8000a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2302      	movs	r3, #2
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000658:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f001 f99c 	bl	80019a8 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000676:	f000 f9cd 	bl	8000a14 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3750      	adds	r7, #80	; 0x50
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_USART2_UART_Init+0x50>)
 8000694:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 8000698:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800069c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f001 fe70 	bl	80023a8 <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ce:	f000 f9a1 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000030 	.word	0x20000030
 80006dc:	40004400 	.word	0x40004400

080006e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART3_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_USART3_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_USART3_UART_Init+0x4c>)
 80006ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USART3_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART3_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USART3_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART3_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USART3_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART3_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USART3_UART_Init+0x4c>)
 8000718:	f001 fe46 	bl	80023a8 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f000 f977 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000074 	.word	0x20000074
 8000730:	40004800 	.word	0x40004800

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	; 0x30
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
 800074e:	4ba2      	ldr	r3, [pc, #648]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4aa1      	ldr	r2, [pc, #644]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 8000754:	f043 0310 	orr.w	r3, r3, #16
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b9f      	ldr	r3, [pc, #636]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0310 	and.w	r3, r3, #16
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	4b9b      	ldr	r3, [pc, #620]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a9a      	ldr	r2, [pc, #616]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b98      	ldr	r3, [pc, #608]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b94      	ldr	r3, [pc, #592]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a93      	ldr	r2, [pc, #588]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b91      	ldr	r3, [pc, #580]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b8d      	ldr	r3, [pc, #564]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a8c      	ldr	r2, [pc, #560]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b8a      	ldr	r3, [pc, #552]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b86      	ldr	r3, [pc, #536]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a85      	ldr	r2, [pc, #532]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b83      	ldr	r3, [pc, #524]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b7f      	ldr	r3, [pc, #508]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a7e      	ldr	r2, [pc, #504]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b7c      	ldr	r3, [pc, #496]	; (80009d8 <MX_GPIO_Init+0x2a4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2108      	movs	r1, #8
 80007f6:	4879      	ldr	r0, [pc, #484]	; (80009dc <MX_GPIO_Init+0x2a8>)
 80007f8:	f000 fe2a 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2101      	movs	r1, #1
 8000800:	4877      	ldr	r0, [pc, #476]	; (80009e0 <MX_GPIO_Init+0x2ac>)
 8000802:	f000 fe25 	bl	8001450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000806:	2200      	movs	r2, #0
 8000808:	f24f 0110 	movw	r1, #61456	; 0xf010
 800080c:	4875      	ldr	r0, [pc, #468]	; (80009e4 <MX_GPIO_Init+0x2b0>)
 800080e:	f000 fe1f 	bl	8001450 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000812:	2308      	movs	r3, #8
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	486c      	ldr	r0, [pc, #432]	; (80009dc <MX_GPIO_Init+0x2a8>)
 800082a:	f000 fc75 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800082e:	2301      	movs	r3, #1
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4866      	ldr	r0, [pc, #408]	; (80009e0 <MX_GPIO_Init+0x2ac>)
 8000846:	f000 fc67 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800084a:	2308      	movs	r3, #8
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800085a:	2305      	movs	r3, #5
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	485e      	ldr	r0, [pc, #376]	; (80009e0 <MX_GPIO_Init+0x2ac>)
 8000866:	f000 fc57 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086a:	2301      	movs	r3, #1
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	485a      	ldr	r0, [pc, #360]	; (80009e8 <MX_GPIO_Init+0x2b4>)
 8000880:	f000 fc4a 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000884:	2310      	movs	r3, #16
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000894:	2306      	movs	r3, #6
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4852      	ldr	r0, [pc, #328]	; (80009e8 <MX_GPIO_Init+0x2b4>)
 80008a0:	f000 fc3a 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008a4:	23e0      	movs	r3, #224	; 0xe0
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008b4:	2305      	movs	r3, #5
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	484a      	ldr	r0, [pc, #296]	; (80009e8 <MX_GPIO_Init+0x2b4>)
 80008c0:	f000 fc2a 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008c4:	2304      	movs	r3, #4
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008d0:	f107 031c 	add.w	r3, r7, #28
 80008d4:	4619      	mov	r1, r3
 80008d6:	4845      	ldr	r0, [pc, #276]	; (80009ec <MX_GPIO_Init+0x2b8>)
 80008d8:	f000 fc1e 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ee:	2305      	movs	r3, #5
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	483c      	ldr	r0, [pc, #240]	; (80009ec <MX_GPIO_Init+0x2b8>)
 80008fa:	f000 fc0d 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fe:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000902:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000904:	2301      	movs	r3, #1
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4833      	ldr	r0, [pc, #204]	; (80009e4 <MX_GPIO_Init+0x2b0>)
 8000918:	f000 fbfe 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800091c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800092e:	2306      	movs	r3, #6
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4829      	ldr	r0, [pc, #164]	; (80009e0 <MX_GPIO_Init+0x2ac>)
 800093a:	f000 fbed 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800093e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4825      	ldr	r0, [pc, #148]	; (80009e8 <MX_GPIO_Init+0x2b4>)
 8000954:	f000 fbe0 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000958:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800096a:	230a      	movs	r3, #10
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	481c      	ldr	r0, [pc, #112]	; (80009e8 <MX_GPIO_Init+0x2b4>)
 8000976:	f000 fbcf 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800097a:	2320      	movs	r3, #32
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4815      	ldr	r0, [pc, #84]	; (80009e4 <MX_GPIO_Init+0x2b0>)
 800098e:	f000 fbc3 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000992:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000998:	2312      	movs	r3, #18
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009a4:	2304      	movs	r3, #4
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	480f      	ldr	r0, [pc, #60]	; (80009ec <MX_GPIO_Init+0x2b8>)
 80009b0:	f000 fbb2 	bl	8001118 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <MX_GPIO_Init+0x2a8>)
 80009ca:	f000 fba5 	bl	8001118 <HAL_GPIO_Init>

}
 80009ce:	bf00      	nop
 80009d0:	3730      	adds	r7, #48	; 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40020800 	.word	0x40020800
 80009e4:	40020c00 	.word	0x40020c00
 80009e8:	40020000 	.word	0x40020000
 80009ec:	40020400 	.word	0x40020400

080009f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d101      	bne.n	8000a06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a02:	f000 f9f5 	bl	8000df0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40001000 	.word	0x40001000

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a08      	ldr	r2, [pc, #32]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800

08000a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	; 0x30
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a4a      	ldr	r2, [pc, #296]	; (8000bbc <HAL_UART_MspInit+0x148>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d134      	bne.n	8000b00 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
 8000a9a:	4b49      	ldr	r3, [pc, #292]	; (8000bc0 <HAL_UART_MspInit+0x14c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a48      	ldr	r2, [pc, #288]	; (8000bc0 <HAL_UART_MspInit+0x14c>)
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b46      	ldr	r3, [pc, #280]	; (8000bc0 <HAL_UART_MspInit+0x14c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	4b42      	ldr	r3, [pc, #264]	; (8000bc0 <HAL_UART_MspInit+0x14c>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a41      	ldr	r2, [pc, #260]	; (8000bc0 <HAL_UART_MspInit+0x14c>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b3f      	ldr	r3, [pc, #252]	; (8000bc0 <HAL_UART_MspInit+0x14c>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ade:	2307      	movs	r3, #7
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4836      	ldr	r0, [pc, #216]	; (8000bc4 <HAL_UART_MspInit+0x150>)
 8000aea:	f000 fb15 	bl	8001118 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	2026      	movs	r0, #38	; 0x26
 8000af4:	f000 fa54 	bl	8000fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000af8:	2026      	movs	r0, #38	; 0x26
 8000afa:	f000 fa6d 	bl	8000fd8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000afe:	e058      	b.n	8000bb2 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART3)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a30      	ldr	r2, [pc, #192]	; (8000bc8 <HAL_UART_MspInit+0x154>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d153      	bne.n	8000bb2 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <HAL_UART_MspInit+0x14c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a2b      	ldr	r2, [pc, #172]	; (8000bc0 <HAL_UART_MspInit+0x14c>)
 8000b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b29      	ldr	r3, [pc, #164]	; (8000bc0 <HAL_UART_MspInit+0x14c>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <HAL_UART_MspInit+0x14c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a24      	ldr	r2, [pc, #144]	; (8000bc0 <HAL_UART_MspInit+0x14c>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <HAL_UART_MspInit+0x14c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <HAL_UART_MspInit+0x14c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a1d      	ldr	r2, [pc, #116]	; (8000bc0 <HAL_UART_MspInit+0x14c>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <HAL_UART_MspInit+0x14c>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b70:	2307      	movs	r3, #7
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4814      	ldr	r0, [pc, #80]	; (8000bcc <HAL_UART_MspInit+0x158>)
 8000b7c:	f000 facc 	bl	8001118 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b92:	2307      	movs	r3, #7
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	480c      	ldr	r0, [pc, #48]	; (8000bd0 <HAL_UART_MspInit+0x15c>)
 8000b9e:	f000 fabb 	bl	8001118 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2027      	movs	r0, #39	; 0x27
 8000ba8:	f000 f9fa 	bl	8000fa0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bac:	2027      	movs	r0, #39	; 0x27
 8000bae:	f000 fa13 	bl	8000fd8 <HAL_NVIC_EnableIRQ>
}
 8000bb2:	bf00      	nop
 8000bb4:	3730      	adds	r7, #48	; 0x30
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40004400 	.word	0x40004400
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	40004800 	.word	0x40004800
 8000bcc:	40020400 	.word	0x40020400
 8000bd0:	40020c00 	.word	0x40020c00

08000bd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	; 0x38
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <HAL_InitTick+0xe4>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	4a32      	ldr	r2, [pc, #200]	; (8000cb8 <HAL_InitTick+0xe4>)
 8000bee:	f043 0310 	orr.w	r3, r3, #16
 8000bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf4:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <HAL_InitTick+0xe4>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	f003 0310 	and.w	r3, r3, #16
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c00:	f107 0210 	add.w	r2, r7, #16
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 f8ec 	bl	8001de8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c10:	6a3b      	ldr	r3, [r7, #32]
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d103      	bne.n	8000c22 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c1a:	f001 f8bd 	bl	8001d98 <HAL_RCC_GetPCLK1Freq>
 8000c1e:	6378      	str	r0, [r7, #52]	; 0x34
 8000c20:	e004      	b.n	8000c2c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c22:	f001 f8b9 	bl	8001d98 <HAL_RCC_GetPCLK1Freq>
 8000c26:	4603      	mov	r3, r0
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c2e:	4a23      	ldr	r2, [pc, #140]	; (8000cbc <HAL_InitTick+0xe8>)
 8000c30:	fba2 2303 	umull	r2, r3, r2, r3
 8000c34:	0c9b      	lsrs	r3, r3, #18
 8000c36:	3b01      	subs	r3, #1
 8000c38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <HAL_InitTick+0xec>)
 8000c3c:	4a21      	ldr	r2, [pc, #132]	; (8000cc4 <HAL_InitTick+0xf0>)
 8000c3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <HAL_InitTick+0xec>)
 8000c42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c46:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c48:	4a1d      	ldr	r2, [pc, #116]	; (8000cc0 <HAL_InitTick+0xec>)
 8000c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c4c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <HAL_InitTick+0xec>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <HAL_InitTick+0xec>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <HAL_InitTick+0xec>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c60:	4817      	ldr	r0, [pc, #92]	; (8000cc0 <HAL_InitTick+0xec>)
 8000c62:	f001 f8f3 	bl	8001e4c <HAL_TIM_Base_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d11b      	bne.n	8000cac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c74:	4812      	ldr	r0, [pc, #72]	; (8000cc0 <HAL_InitTick+0xec>)
 8000c76:	f001 f943 	bl	8001f00 <HAL_TIM_Base_Start_IT>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d111      	bne.n	8000cac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c88:	2036      	movs	r0, #54	; 0x36
 8000c8a:	f000 f9a5 	bl	8000fd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d808      	bhi.n	8000ca6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	2036      	movs	r0, #54	; 0x36
 8000c9a:	f000 f981 	bl	8000fa0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <HAL_InitTick+0xf4>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	e002      	b.n	8000cac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3738      	adds	r7, #56	; 0x38
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	431bde83 	.word	0x431bde83
 8000cc0:	200000c4 	.word	0x200000c4
 8000cc4:	40001000 	.word	0x40001000
 8000cc8:	20000004 	.word	0x20000004

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <USART2_IRQHandler+0x10>)
 8000cfe:	f001 fc73 	bl	80025e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000030 	.word	0x20000030

08000d0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <USART3_IRQHandler+0x10>)
 8000d12:	f001 fc69 	bl	80025e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000074 	.word	0x20000074

08000d20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <TIM6_DAC_IRQHandler+0x10>)
 8000d26:	f001 f95b 	bl	8001fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200000c4 	.word	0x200000c4

08000d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <SystemInit+0x20>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <SystemInit+0x20>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d5e:	490e      	ldr	r1, [pc, #56]	; (8000d98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d60:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d74:	4c0b      	ldr	r4, [pc, #44]	; (8000da4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d82:	f7ff ffd7 	bl	8000d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f004 fd4f 	bl	8005828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8a:	f7ff fbd5 	bl	8000538 <main>
  bx  lr    
 8000d8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d9c:	08005904 	.word	0x08005904
  ldr r2, =_sbss
 8000da0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000da4:	20012eb8 	.word	0x20012eb8

08000da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <HAL_Init+0x40>)
 8000db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_Init+0x40>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_Init+0x40>)
 8000dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f8d8 	bl	8000f8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff fefa 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff fe20 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008
 8000e14:	2000010c 	.word	0x2000010c

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	2000010c 	.word	0x2000010c

08000e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db0b      	blt.n	8000ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	4907      	ldr	r1, [pc, #28]	; (8000ecc <__NVIC_EnableIRQ+0x38>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ff4c 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb2:	f7ff ff61 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000fb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	6978      	ldr	r0, [r7, #20]
 8000fbe:	f7ff ffb1 	bl	8000f24 <NVIC_EncodePriority>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff80 	bl	8000ed0 <__NVIC_SetPriority>
}
 8000fd0:	bf00      	nop
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff54 	bl	8000e94 <__NVIC_EnableIRQ>
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001000:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001002:	f7ff ff09 	bl	8000e18 <HAL_GetTick>
 8001006:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d008      	beq.n	8001026 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2280      	movs	r2, #128	; 0x80
 8001018:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e052      	b.n	80010cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0216 	bic.w	r2, r2, #22
 8001034:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	695a      	ldr	r2, [r3, #20]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001044:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	2b00      	cmp	r3, #0
 800104c:	d103      	bne.n	8001056 <HAL_DMA_Abort+0x62>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f022 0208 	bic.w	r2, r2, #8
 8001064:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0201 	bic.w	r2, r2, #1
 8001074:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001076:	e013      	b.n	80010a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001078:	f7ff fece 	bl	8000e18 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b05      	cmp	r3, #5
 8001084:	d90c      	bls.n	80010a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2220      	movs	r2, #32
 800108a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2203      	movs	r2, #3
 8001090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e015      	b.n	80010cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d1e4      	bne.n	8001078 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b2:	223f      	movs	r2, #63	; 0x3f
 80010b4:	409a      	lsls	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d004      	beq.n	80010f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00c      	b.n	800110c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2205      	movs	r2, #5
 80010f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0201 	bic.w	r2, r2, #1
 8001108:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	e16b      	b.n	800140c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	429a      	cmp	r2, r3
 800114e:	f040 815a 	bne.w	8001406 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d005      	beq.n	800116a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001166:	2b02      	cmp	r3, #2
 8001168:	d130      	bne.n	80011cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 0201 	and.w	r2, r3, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d017      	beq.n	8001208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d123      	bne.n	800125c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	69b9      	ldr	r1, [r7, #24]
 8001258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0203 	and.w	r2, r3, #3
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80b4 	beq.w	8001406 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b60      	ldr	r3, [pc, #384]	; (8001424 <HAL_GPIO_Init+0x30c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a5f      	ldr	r2, [pc, #380]	; (8001424 <HAL_GPIO_Init+0x30c>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b5d      	ldr	r3, [pc, #372]	; (8001424 <HAL_GPIO_Init+0x30c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ba:	4a5b      	ldr	r2, [pc, #364]	; (8001428 <HAL_GPIO_Init+0x310>)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a52      	ldr	r2, [pc, #328]	; (800142c <HAL_GPIO_Init+0x314>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d02b      	beq.n	800133e <HAL_GPIO_Init+0x226>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a51      	ldr	r2, [pc, #324]	; (8001430 <HAL_GPIO_Init+0x318>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d025      	beq.n	800133a <HAL_GPIO_Init+0x222>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a50      	ldr	r2, [pc, #320]	; (8001434 <HAL_GPIO_Init+0x31c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d01f      	beq.n	8001336 <HAL_GPIO_Init+0x21e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4f      	ldr	r2, [pc, #316]	; (8001438 <HAL_GPIO_Init+0x320>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d019      	beq.n	8001332 <HAL_GPIO_Init+0x21a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4e      	ldr	r2, [pc, #312]	; (800143c <HAL_GPIO_Init+0x324>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0x216>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4d      	ldr	r2, [pc, #308]	; (8001440 <HAL_GPIO_Init+0x328>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d00d      	beq.n	800132a <HAL_GPIO_Init+0x212>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4c      	ldr	r2, [pc, #304]	; (8001444 <HAL_GPIO_Init+0x32c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d007      	beq.n	8001326 <HAL_GPIO_Init+0x20e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4b      	ldr	r2, [pc, #300]	; (8001448 <HAL_GPIO_Init+0x330>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_GPIO_Init+0x20a>
 800131e:	2307      	movs	r3, #7
 8001320:	e00e      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001322:	2308      	movs	r3, #8
 8001324:	e00c      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001326:	2306      	movs	r3, #6
 8001328:	e00a      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800132a:	2305      	movs	r3, #5
 800132c:	e008      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800132e:	2304      	movs	r3, #4
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001332:	2303      	movs	r3, #3
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x228>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x228>
 800133e:	2300      	movs	r3, #0
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001350:	4935      	ldr	r1, [pc, #212]	; (8001428 <HAL_GPIO_Init+0x310>)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135e:	4b3b      	ldr	r3, [pc, #236]	; (800144c <HAL_GPIO_Init+0x334>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001382:	4a32      	ldr	r2, [pc, #200]	; (800144c <HAL_GPIO_Init+0x334>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001388:	4b30      	ldr	r3, [pc, #192]	; (800144c <HAL_GPIO_Init+0x334>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ac:	4a27      	ldr	r2, [pc, #156]	; (800144c <HAL_GPIO_Init+0x334>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <HAL_GPIO_Init+0x334>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d6:	4a1d      	ldr	r2, [pc, #116]	; (800144c <HAL_GPIO_Init+0x334>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <HAL_GPIO_Init+0x334>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001400:	4a12      	ldr	r2, [pc, #72]	; (800144c <HAL_GPIO_Init+0x334>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	f67f ae90 	bls.w	8001134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40013800 	.word	0x40013800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020800 	.word	0x40020800
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40021000 	.word	0x40021000
 8001440:	40021400 	.word	0x40021400
 8001444:	40021800 	.word	0x40021800
 8001448:	40021c00 	.word	0x40021c00
 800144c:	40013c00 	.word	0x40013c00

08001450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
 800145c:	4613      	mov	r3, r2
 800145e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001460:	787b      	ldrb	r3, [r7, #1]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800146c:	e003      	b.n	8001476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	041a      	lsls	r2, r3, #16
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	619a      	str	r2, [r3, #24]
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001482:	b480      	push	{r7}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001494:	887a      	ldrh	r2, [r7, #2]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4013      	ands	r3, r2
 800149a:	041a      	lsls	r2, r3, #16
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43d9      	mvns	r1, r3
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	400b      	ands	r3, r1
 80014a4:	431a      	orrs	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	619a      	str	r2, [r3, #24]
}
 80014aa:	bf00      	nop
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e267      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d075      	beq.n	80015c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014d6:	4b88      	ldr	r3, [pc, #544]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b04      	cmp	r3, #4
 80014e0:	d00c      	beq.n	80014fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014e2:	4b85      	ldr	r3, [pc, #532]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d112      	bne.n	8001514 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ee:	4b82      	ldr	r3, [pc, #520]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014fa:	d10b      	bne.n	8001514 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	4b7e      	ldr	r3, [pc, #504]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d05b      	beq.n	80015c0 <HAL_RCC_OscConfig+0x108>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d157      	bne.n	80015c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e242      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151c:	d106      	bne.n	800152c <HAL_RCC_OscConfig+0x74>
 800151e:	4b76      	ldr	r3, [pc, #472]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a75      	ldr	r2, [pc, #468]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e01d      	b.n	8001568 <HAL_RCC_OscConfig+0xb0>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x98>
 8001536:	4b70      	ldr	r3, [pc, #448]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a6f      	ldr	r2, [pc, #444]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800153c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	4b6d      	ldr	r3, [pc, #436]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a6c      	ldr	r2, [pc, #432]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	e00b      	b.n	8001568 <HAL_RCC_OscConfig+0xb0>
 8001550:	4b69      	ldr	r3, [pc, #420]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a68      	ldr	r2, [pc, #416]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	4b66      	ldr	r3, [pc, #408]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a65      	ldr	r2, [pc, #404]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d013      	beq.n	8001598 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fc52 	bl	8000e18 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fc4e 	bl	8000e18 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e207      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	4b5b      	ldr	r3, [pc, #364]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0xc0>
 8001596:	e014      	b.n	80015c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001598:	f7ff fc3e 	bl	8000e18 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff fc3a 	bl	8000e18 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e1f3      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b2:	4b51      	ldr	r3, [pc, #324]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0xe8>
 80015be:	e000      	b.n	80015c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d063      	beq.n	8001696 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ce:	4b4a      	ldr	r3, [pc, #296]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00b      	beq.n	80015f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015da:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d11c      	bne.n	8001620 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015e6:	4b44      	ldr	r3, [pc, #272]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d116      	bne.n	8001620 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f2:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d005      	beq.n	800160a <HAL_RCC_OscConfig+0x152>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d001      	beq.n	800160a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e1c7      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160a:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4937      	ldr	r1, [pc, #220]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800161a:	4313      	orrs	r3, r2
 800161c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161e:	e03a      	b.n	8001696 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001628:	4b34      	ldr	r3, [pc, #208]	; (80016fc <HAL_RCC_OscConfig+0x244>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162e:	f7ff fbf3 	bl	8000e18 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001636:	f7ff fbef 	bl	8000e18 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e1a8      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4925      	ldr	r1, [pc, #148]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 8001664:	4313      	orrs	r3, r2
 8001666:	600b      	str	r3, [r1, #0]
 8001668:	e015      	b.n	8001696 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800166a:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_RCC_OscConfig+0x244>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001670:	f7ff fbd2 	bl	8000e18 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001678:	f7ff fbce 	bl	8000e18 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e187      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d036      	beq.n	8001710 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d016      	beq.n	80016d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_RCC_OscConfig+0x248>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff fbb2 	bl	8000e18 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff fbae 	bl	8000e18 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e167      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_RCC_OscConfig+0x240>)
 80016cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x200>
 80016d6:	e01b      	b.n	8001710 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_RCC_OscConfig+0x248>)
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016de:	f7ff fb9b 	bl	8000e18 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e4:	e00e      	b.n	8001704 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016e6:	f7ff fb97 	bl	8000e18 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d907      	bls.n	8001704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e150      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
 80016f8:	40023800 	.word	0x40023800
 80016fc:	42470000 	.word	0x42470000
 8001700:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001704:	4b88      	ldr	r3, [pc, #544]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1ea      	bne.n	80016e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 8097 	beq.w	800184c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001722:	4b81      	ldr	r3, [pc, #516]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10f      	bne.n	800174e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	4b7d      	ldr	r3, [pc, #500]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a7c      	ldr	r2, [pc, #496]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b7a      	ldr	r3, [pc, #488]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174a:	2301      	movs	r3, #1
 800174c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174e:	4b77      	ldr	r3, [pc, #476]	; (800192c <HAL_RCC_OscConfig+0x474>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d118      	bne.n	800178c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175a:	4b74      	ldr	r3, [pc, #464]	; (800192c <HAL_RCC_OscConfig+0x474>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a73      	ldr	r2, [pc, #460]	; (800192c <HAL_RCC_OscConfig+0x474>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001766:	f7ff fb57 	bl	8000e18 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176e:	f7ff fb53 	bl	8000e18 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e10c      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	4b6a      	ldr	r3, [pc, #424]	; (800192c <HAL_RCC_OscConfig+0x474>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x2ea>
 8001794:	4b64      	ldr	r3, [pc, #400]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001798:	4a63      	ldr	r2, [pc, #396]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6713      	str	r3, [r2, #112]	; 0x70
 80017a0:	e01c      	b.n	80017dc <HAL_RCC_OscConfig+0x324>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b05      	cmp	r3, #5
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x30c>
 80017aa:	4b5f      	ldr	r3, [pc, #380]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	4a5e      	ldr	r2, [pc, #376]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6713      	str	r3, [r2, #112]	; 0x70
 80017b6:	4b5c      	ldr	r3, [pc, #368]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ba:	4a5b      	ldr	r2, [pc, #364]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6713      	str	r3, [r2, #112]	; 0x70
 80017c2:	e00b      	b.n	80017dc <HAL_RCC_OscConfig+0x324>
 80017c4:	4b58      	ldr	r3, [pc, #352]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c8:	4a57      	ldr	r2, [pc, #348]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	6713      	str	r3, [r2, #112]	; 0x70
 80017d0:	4b55      	ldr	r3, [pc, #340]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d4:	4a54      	ldr	r2, [pc, #336]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80017d6:	f023 0304 	bic.w	r3, r3, #4
 80017da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d015      	beq.n	8001810 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e4:	f7ff fb18 	bl	8000e18 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ec:	f7ff fb14 	bl	8000e18 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e0cb      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001802:	4b49      	ldr	r3, [pc, #292]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0ee      	beq.n	80017ec <HAL_RCC_OscConfig+0x334>
 800180e:	e014      	b.n	800183a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001810:	f7ff fb02 	bl	8000e18 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001816:	e00a      	b.n	800182e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001818:	f7ff fafe 	bl	8000e18 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	f241 3288 	movw	r2, #5000	; 0x1388
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e0b5      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182e:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1ee      	bne.n	8001818 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800183a:	7dfb      	ldrb	r3, [r7, #23]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d105      	bne.n	800184c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001840:	4b39      	ldr	r3, [pc, #228]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	4a38      	ldr	r2, [pc, #224]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800184a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80a1 	beq.w	8001998 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001856:	4b34      	ldr	r3, [pc, #208]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f003 030c 	and.w	r3, r3, #12
 800185e:	2b08      	cmp	r3, #8
 8001860:	d05c      	beq.n	800191c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d141      	bne.n	80018ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186a:	4b31      	ldr	r3, [pc, #196]	; (8001930 <HAL_RCC_OscConfig+0x478>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fad2 	bl	8000e18 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff face 	bl	8000e18 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e087      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	4b27      	ldr	r3, [pc, #156]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69da      	ldr	r2, [r3, #28]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	431a      	orrs	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	019b      	lsls	r3, r3, #6
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ac:	085b      	lsrs	r3, r3, #1
 80018ae:	3b01      	subs	r3, #1
 80018b0:	041b      	lsls	r3, r3, #16
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b8:	061b      	lsls	r3, r3, #24
 80018ba:	491b      	ldr	r1, [pc, #108]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_RCC_OscConfig+0x478>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c6:	f7ff faa7 	bl	8000e18 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ce:	f7ff faa3 	bl	8000e18 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e05c      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x416>
 80018ec:	e054      	b.n	8001998 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <HAL_RCC_OscConfig+0x478>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fa90 	bl	8000e18 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fc:	f7ff fa8c 	bl	8000e18 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e045      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_RCC_OscConfig+0x470>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x444>
 800191a:	e03d      	b.n	8001998 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d107      	bne.n	8001934 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e038      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
 8001928:	40023800 	.word	0x40023800
 800192c:	40007000 	.word	0x40007000
 8001930:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_RCC_OscConfig+0x4ec>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d028      	beq.n	8001994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800194c:	429a      	cmp	r2, r3
 800194e:	d121      	bne.n	8001994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	429a      	cmp	r2, r3
 800195c:	d11a      	bne.n	8001994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001964:	4013      	ands	r3, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800196a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800196c:	4293      	cmp	r3, r2
 800196e:	d111      	bne.n	8001994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197a:	085b      	lsrs	r3, r3, #1
 800197c:	3b01      	subs	r3, #1
 800197e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d107      	bne.n	8001994 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800

080019a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0cc      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d90c      	bls.n	80019e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b65      	ldr	r3, [pc, #404]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b63      	ldr	r3, [pc, #396]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0b8      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d020      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019fc:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a14:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4a52      	ldr	r2, [pc, #328]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	494d      	ldr	r1, [pc, #308]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d044      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d119      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e07f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d003      	beq.n	8001a66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e06f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e067      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a86:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f023 0203 	bic.w	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4934      	ldr	r1, [pc, #208]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a98:	f7ff f9be 	bl	8000e18 <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7ff f9ba 	bl	8000e18 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e04f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 020c 	and.w	r2, r3, #12
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1eb      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d20c      	bcs.n	8001af0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e032      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d008      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4916      	ldr	r1, [pc, #88]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	490e      	ldr	r1, [pc, #56]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b2e:	f000 f821 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8001b32:	4602      	mov	r2, r0
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	490a      	ldr	r1, [pc, #40]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	5ccb      	ldrb	r3, [r1, r3]
 8001b42:	fa22 f303 	lsr.w	r3, r2, r3
 8001b46:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f840 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023c00 	.word	0x40023c00
 8001b64:	40023800 	.word	0x40023800
 8001b68:	080058dc 	.word	0x080058dc
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000004 	.word	0x20000004

08001b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b78:	b094      	sub	sp, #80	; 0x50
 8001b7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b80:	2300      	movs	r3, #0
 8001b82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b84:	2300      	movs	r3, #0
 8001b86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b8c:	4b79      	ldr	r3, [pc, #484]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d00d      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	f200 80e1 	bhi.w	8001d60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d003      	beq.n	8001bae <HAL_RCC_GetSysClockFreq+0x3a>
 8001ba6:	e0db      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba8:	4b73      	ldr	r3, [pc, #460]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001baa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001bac:	e0db      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bae:	4b73      	ldr	r3, [pc, #460]	; (8001d7c <HAL_RCC_GetSysClockFreq+0x208>)
 8001bb0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bb2:	e0d8      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb4:	4b6f      	ldr	r3, [pc, #444]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bbc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bbe:	4b6d      	ldr	r3, [pc, #436]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d063      	beq.n	8001c92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bca:	4b6a      	ldr	r3, [pc, #424]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	099b      	lsrs	r3, r3, #6
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
 8001bde:	2300      	movs	r3, #0
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
 8001be2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001be6:	4622      	mov	r2, r4
 8001be8:	462b      	mov	r3, r5
 8001bea:	f04f 0000 	mov.w	r0, #0
 8001bee:	f04f 0100 	mov.w	r1, #0
 8001bf2:	0159      	lsls	r1, r3, #5
 8001bf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bf8:	0150      	lsls	r0, r2, #5
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4621      	mov	r1, r4
 8001c00:	1a51      	subs	r1, r2, r1
 8001c02:	6139      	str	r1, [r7, #16]
 8001c04:	4629      	mov	r1, r5
 8001c06:	eb63 0301 	sbc.w	r3, r3, r1
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c18:	4659      	mov	r1, fp
 8001c1a:	018b      	lsls	r3, r1, #6
 8001c1c:	4651      	mov	r1, sl
 8001c1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c22:	4651      	mov	r1, sl
 8001c24:	018a      	lsls	r2, r1, #6
 8001c26:	4651      	mov	r1, sl
 8001c28:	ebb2 0801 	subs.w	r8, r2, r1
 8001c2c:	4659      	mov	r1, fp
 8001c2e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c46:	4690      	mov	r8, r2
 8001c48:	4699      	mov	r9, r3
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	eb18 0303 	adds.w	r3, r8, r3
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	462b      	mov	r3, r5
 8001c54:	eb49 0303 	adc.w	r3, r9, r3
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c66:	4629      	mov	r1, r5
 8001c68:	024b      	lsls	r3, r1, #9
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c70:	4621      	mov	r1, r4
 8001c72:	024a      	lsls	r2, r1, #9
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c84:	f7fe faa4 	bl	80001d0 <__aeabi_uldivmod>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c90:	e058      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c92:	4b38      	ldr	r3, [pc, #224]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	099b      	lsrs	r3, r3, #6
 8001c98:	2200      	movs	r2, #0
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ca2:	623b      	str	r3, [r7, #32]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cac:	4642      	mov	r2, r8
 8001cae:	464b      	mov	r3, r9
 8001cb0:	f04f 0000 	mov.w	r0, #0
 8001cb4:	f04f 0100 	mov.w	r1, #0
 8001cb8:	0159      	lsls	r1, r3, #5
 8001cba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cbe:	0150      	lsls	r0, r2, #5
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4641      	mov	r1, r8
 8001cc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cca:	4649      	mov	r1, r9
 8001ccc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	f04f 0300 	mov.w	r3, #0
 8001cd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ce0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ce4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ce8:	eb63 050b 	sbc.w	r5, r3, fp
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	00eb      	lsls	r3, r5, #3
 8001cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cfa:	00e2      	lsls	r2, r4, #3
 8001cfc:	4614      	mov	r4, r2
 8001cfe:	461d      	mov	r5, r3
 8001d00:	4643      	mov	r3, r8
 8001d02:	18e3      	adds	r3, r4, r3
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	464b      	mov	r3, r9
 8001d08:	eb45 0303 	adc.w	r3, r5, r3
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	028b      	lsls	r3, r1, #10
 8001d1e:	4621      	mov	r1, r4
 8001d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d24:	4621      	mov	r1, r4
 8001d26:	028a      	lsls	r2, r1, #10
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61bb      	str	r3, [r7, #24]
 8001d32:	61fa      	str	r2, [r7, #28]
 8001d34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d38:	f7fe fa4a 	bl	80001d0 <__aeabi_uldivmod>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4613      	mov	r3, r2
 8001d42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d44:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	0c1b      	lsrs	r3, r3, #16
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d5e:	e002      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3750      	adds	r7, #80	; 0x50
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	00f42400 	.word	0x00f42400
 8001d7c:	007a1200 	.word	0x007a1200

08001d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000000 	.word	0x20000000

08001d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d9c:	f7ff fff0 	bl	8001d80 <HAL_RCC_GetHCLKFreq>
 8001da0:	4602      	mov	r2, r0
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	0a9b      	lsrs	r3, r3, #10
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	4903      	ldr	r1, [pc, #12]	; (8001dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dae:	5ccb      	ldrb	r3, [r1, r3]
 8001db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	080058ec 	.word	0x080058ec

08001dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dc4:	f7ff ffdc 	bl	8001d80 <HAL_RCC_GetHCLKFreq>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	0b5b      	lsrs	r3, r3, #13
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	4903      	ldr	r1, [pc, #12]	; (8001de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd6:	5ccb      	ldrb	r3, [r1, r3]
 8001dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40023800 	.word	0x40023800
 8001de4:	080058ec 	.word	0x080058ec

08001de8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	220f      	movs	r2, #15
 8001df6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_RCC_GetClockConfig+0x5c>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 0203 	and.w	r2, r3, #3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_RCC_GetClockConfig+0x5c>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_RCC_GetClockConfig+0x5c>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_RCC_GetClockConfig+0x5c>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	08db      	lsrs	r3, r3, #3
 8001e22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e2a:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <HAL_RCC_GetClockConfig+0x60>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0207 	and.w	r2, r3, #7
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	601a      	str	r2, [r3, #0]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40023c00 	.word	0x40023c00

08001e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e041      	b.n	8001ee2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f839 	bl	8001eea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3304      	adds	r3, #4
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	f000 f9d8 	bl	8002240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d001      	beq.n	8001f18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e04e      	b.n	8001fb6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a23      	ldr	r2, [pc, #140]	; (8001fc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d022      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x80>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f42:	d01d      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x80>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d018      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x80>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <HAL_TIM_Base_Start_IT+0xcc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d013      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x80>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1c      	ldr	r2, [pc, #112]	; (8001fd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d00e      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x80>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a1b      	ldr	r2, [pc, #108]	; (8001fd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d009      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x80>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d004      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0x80>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <HAL_TIM_Base_Start_IT+0xdc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d111      	bne.n	8001fa4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b06      	cmp	r3, #6
 8001f90:	d010      	beq.n	8001fb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa2:	e007      	b.n	8001fb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f042 0201 	orr.w	r2, r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	40000400 	.word	0x40000400
 8001fcc:	40000800 	.word	0x40000800
 8001fd0:	40000c00 	.word	0x40000c00
 8001fd4:	40010400 	.word	0x40010400
 8001fd8:	40014000 	.word	0x40014000
 8001fdc:	40001800 	.word	0x40001800

08001fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d122      	bne.n	800203c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b02      	cmp	r3, #2
 8002002:	d11b      	bne.n	800203c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0202 	mvn.w	r2, #2
 800200c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f8ee 	bl	8002204 <HAL_TIM_IC_CaptureCallback>
 8002028:	e005      	b.n	8002036 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f8e0 	bl	80021f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f8f1 	bl	8002218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b04      	cmp	r3, #4
 8002048:	d122      	bne.n	8002090 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b04      	cmp	r3, #4
 8002056:	d11b      	bne.n	8002090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0204 	mvn.w	r2, #4
 8002060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2202      	movs	r2, #2
 8002066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f8c4 	bl	8002204 <HAL_TIM_IC_CaptureCallback>
 800207c:	e005      	b.n	800208a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8b6 	bl	80021f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f8c7 	bl	8002218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b08      	cmp	r3, #8
 800209c:	d122      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d11b      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0208 	mvn.w	r2, #8
 80020b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2204      	movs	r2, #4
 80020ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f89a 	bl	8002204 <HAL_TIM_IC_CaptureCallback>
 80020d0:	e005      	b.n	80020de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f88c 	bl	80021f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f89d 	bl	8002218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b10      	cmp	r3, #16
 80020f0:	d122      	bne.n	8002138 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b10      	cmp	r3, #16
 80020fe:	d11b      	bne.n	8002138 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0210 	mvn.w	r2, #16
 8002108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2208      	movs	r2, #8
 800210e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 f870 	bl	8002204 <HAL_TIM_IC_CaptureCallback>
 8002124:	e005      	b.n	8002132 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f862 	bl	80021f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f873 	bl	8002218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b01      	cmp	r3, #1
 8002144:	d10e      	bne.n	8002164 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b01      	cmp	r3, #1
 8002152:	d107      	bne.n	8002164 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0201 	mvn.w	r2, #1
 800215c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f7fe fc46 	bl	80009f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216e:	2b80      	cmp	r3, #128	; 0x80
 8002170:	d10e      	bne.n	8002190 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217c:	2b80      	cmp	r3, #128	; 0x80
 800217e:	d107      	bne.n	8002190 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f902 	bl	8002394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219a:	2b40      	cmp	r3, #64	; 0x40
 800219c:	d10e      	bne.n	80021bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a8:	2b40      	cmp	r3, #64	; 0x40
 80021aa:	d107      	bne.n	80021bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f838 	bl	800222c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0320 	and.w	r3, r3, #32
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	d10e      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d107      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0220 	mvn.w	r2, #32
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f8cc 	bl	8002380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a40      	ldr	r2, [pc, #256]	; (8002354 <TIM_Base_SetConfig+0x114>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d013      	beq.n	8002280 <TIM_Base_SetConfig+0x40>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225e:	d00f      	beq.n	8002280 <TIM_Base_SetConfig+0x40>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a3d      	ldr	r2, [pc, #244]	; (8002358 <TIM_Base_SetConfig+0x118>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d00b      	beq.n	8002280 <TIM_Base_SetConfig+0x40>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a3c      	ldr	r2, [pc, #240]	; (800235c <TIM_Base_SetConfig+0x11c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d007      	beq.n	8002280 <TIM_Base_SetConfig+0x40>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a3b      	ldr	r2, [pc, #236]	; (8002360 <TIM_Base_SetConfig+0x120>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d003      	beq.n	8002280 <TIM_Base_SetConfig+0x40>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a3a      	ldr	r2, [pc, #232]	; (8002364 <TIM_Base_SetConfig+0x124>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d108      	bne.n	8002292 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a2f      	ldr	r2, [pc, #188]	; (8002354 <TIM_Base_SetConfig+0x114>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d02b      	beq.n	80022f2 <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a0:	d027      	beq.n	80022f2 <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a2c      	ldr	r2, [pc, #176]	; (8002358 <TIM_Base_SetConfig+0x118>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d023      	beq.n	80022f2 <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a2b      	ldr	r2, [pc, #172]	; (800235c <TIM_Base_SetConfig+0x11c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d01f      	beq.n	80022f2 <TIM_Base_SetConfig+0xb2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a2a      	ldr	r2, [pc, #168]	; (8002360 <TIM_Base_SetConfig+0x120>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01b      	beq.n	80022f2 <TIM_Base_SetConfig+0xb2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a29      	ldr	r2, [pc, #164]	; (8002364 <TIM_Base_SetConfig+0x124>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d017      	beq.n	80022f2 <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a28      	ldr	r2, [pc, #160]	; (8002368 <TIM_Base_SetConfig+0x128>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a27      	ldr	r2, [pc, #156]	; (800236c <TIM_Base_SetConfig+0x12c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00f      	beq.n	80022f2 <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a26      	ldr	r2, [pc, #152]	; (8002370 <TIM_Base_SetConfig+0x130>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00b      	beq.n	80022f2 <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a25      	ldr	r2, [pc, #148]	; (8002374 <TIM_Base_SetConfig+0x134>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d007      	beq.n	80022f2 <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a24      	ldr	r2, [pc, #144]	; (8002378 <TIM_Base_SetConfig+0x138>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d003      	beq.n	80022f2 <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a23      	ldr	r2, [pc, #140]	; (800237c <TIM_Base_SetConfig+0x13c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d108      	bne.n	8002304 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4313      	orrs	r3, r2
 8002302:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <TIM_Base_SetConfig+0x114>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d003      	beq.n	8002338 <TIM_Base_SetConfig+0xf8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a0c      	ldr	r2, [pc, #48]	; (8002364 <TIM_Base_SetConfig+0x124>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d103      	bne.n	8002340 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	615a      	str	r2, [r3, #20]
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40010000 	.word	0x40010000
 8002358:	40000400 	.word	0x40000400
 800235c:	40000800 	.word	0x40000800
 8002360:	40000c00 	.word	0x40000c00
 8002364:	40010400 	.word	0x40010400
 8002368:	40014000 	.word	0x40014000
 800236c:	40014400 	.word	0x40014400
 8002370:	40014800 	.word	0x40014800
 8002374:	40001800 	.word	0x40001800
 8002378:	40001c00 	.word	0x40001c00
 800237c:	40002000 	.word	0x40002000

08002380 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e03f      	b.n	800243a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d106      	bne.n	80023d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7fe fb50 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2224      	movs	r2, #36	; 0x24
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fdef 	bl	8002fd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691a      	ldr	r2, [r3, #16]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002400:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002410:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68da      	ldr	r2, [r3, #12]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002420:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2220      	movs	r2, #32
 800242c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b08a      	sub	sp, #40	; 0x28
 8002446:	af02      	add	r7, sp, #8
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	603b      	str	r3, [r7, #0]
 800244e:	4613      	mov	r3, r2
 8002450:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b20      	cmp	r3, #32
 8002460:	f040 808c 	bne.w	800257c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <HAL_UART_Receive+0x2e>
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e084      	b.n	800257e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_UART_Receive+0x40>
 800247e:	2302      	movs	r3, #2
 8002480:	e07d      	b.n	800257e <HAL_UART_Receive+0x13c>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2222      	movs	r2, #34	; 0x22
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800249e:	f7fe fcbb 	bl	8000e18 <HAL_GetTick>
 80024a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	88fa      	ldrh	r2, [r7, #6]
 80024a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	88fa      	ldrh	r2, [r7, #6]
 80024ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b8:	d108      	bne.n	80024cc <HAL_UART_Receive+0x8a>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d104      	bne.n	80024cc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	e003      	b.n	80024d4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80024dc:	e043      	b.n	8002566 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2200      	movs	r2, #0
 80024e6:	2120      	movs	r1, #32
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fb2b 	bl	8002b44 <UART_WaitOnFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e042      	b.n	800257e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10c      	bne.n	8002518 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	b29b      	uxth	r3, r3
 8002506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250a:	b29a      	uxth	r2, r3
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	3302      	adds	r3, #2
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	e01f      	b.n	8002558 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002520:	d007      	beq.n	8002532 <HAL_UART_Receive+0xf0>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10a      	bne.n	8002540 <HAL_UART_Receive+0xfe>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	e008      	b.n	8002552 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800254c:	b2da      	uxtb	r2, r3
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3301      	adds	r3, #1
 8002556:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800255c:	b29b      	uxth	r3, r3
 800255e:	3b01      	subs	r3, #1
 8002560:	b29a      	uxth	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1b6      	bne.n	80024de <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	e000      	b.n	800257e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
  }
}
 800257e:	4618      	mov	r0, r3
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	4613      	mov	r3, r2
 8002592:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b20      	cmp	r3, #32
 800259e:	d11d      	bne.n	80025dc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_UART_Receive_IT+0x26>
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e016      	b.n	80025de <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_UART_Receive_IT+0x38>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e00f      	b.n	80025de <HAL_UART_Receive_IT+0x58>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	461a      	mov	r2, r3
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fb24 	bl	8002c20 <UART_Start_Receive_IT>
 80025d8:	4603      	mov	r3, r0
 80025da:	e000      	b.n	80025de <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80025dc:	2302      	movs	r3, #2
  }
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b0ba      	sub	sp, #232	; 0xe8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002614:	2300      	movs	r3, #0
 8002616:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800261a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002626:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10f      	bne.n	800264e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800262e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002632:	f003 0320 	and.w	r3, r3, #32
 8002636:	2b00      	cmp	r3, #0
 8002638:	d009      	beq.n	800264e <HAL_UART_IRQHandler+0x66>
 800263a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fc07 	bl	8002e5a <UART_Receive_IT>
      return;
 800264c:	e256      	b.n	8002afc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800264e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80de 	beq.w	8002814 <HAL_UART_IRQHandler+0x22c>
 8002658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d106      	bne.n	8002672 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002668:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80d1 	beq.w	8002814 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00b      	beq.n	8002696 <HAL_UART_IRQHandler+0xae>
 800267e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_UART_IRQHandler+0xd2>
 80026a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f043 0202 	orr.w	r2, r3, #2
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_UART_IRQHandler+0xf6>
 80026c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	f043 0204 	orr.w	r2, r3, #4
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80026de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d011      	beq.n	800270e <HAL_UART_IRQHandler+0x126>
 80026ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d105      	bne.n	8002702 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80026f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f043 0208 	orr.w	r2, r3, #8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 81ed 	beq.w	8002af2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271c:	f003 0320 	and.w	r3, r3, #32
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_UART_IRQHandler+0x14e>
 8002724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002728:	f003 0320 	and.w	r3, r3, #32
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 fb92 	bl	8002e5a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002740:	2b40      	cmp	r3, #64	; 0x40
 8002742:	bf0c      	ite	eq
 8002744:	2301      	moveq	r3, #1
 8002746:	2300      	movne	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d103      	bne.n	8002762 <HAL_UART_IRQHandler+0x17a>
 800275a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800275e:	2b00      	cmp	r3, #0
 8002760:	d04f      	beq.n	8002802 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fa9a 	bl	8002c9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002772:	2b40      	cmp	r3, #64	; 0x40
 8002774:	d141      	bne.n	80027fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3314      	adds	r3, #20
 800277c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002780:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002784:	e853 3f00 	ldrex	r3, [r3]
 8002788:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800278c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002794:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3314      	adds	r3, #20
 800279e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80027a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80027a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80027ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80027b2:	e841 2300 	strex	r3, r2, [r1]
 80027b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80027ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1d9      	bne.n	8002776 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d013      	beq.n	80027f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ce:	4a7d      	ldr	r2, [pc, #500]	; (80029c4 <HAL_UART_IRQHandler+0x3dc>)
 80027d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe fc7c 	bl	80010d4 <HAL_DMA_Abort_IT>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d016      	beq.n	8002810 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027ec:	4610      	mov	r0, r2
 80027ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f0:	e00e      	b.n	8002810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f990 	bl	8002b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f8:	e00a      	b.n	8002810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f98c 	bl	8002b18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002800:	e006      	b.n	8002810 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f988 	bl	8002b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800280e:	e170      	b.n	8002af2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002810:	bf00      	nop
    return;
 8002812:	e16e      	b.n	8002af2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	2b01      	cmp	r3, #1
 800281a:	f040 814a 	bne.w	8002ab2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800281e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8143 	beq.w	8002ab2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800282c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 813c 	beq.w	8002ab2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b40      	cmp	r3, #64	; 0x40
 800285c:	f040 80b4 	bne.w	80029c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800286c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 8140 	beq.w	8002af6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800287a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800287e:	429a      	cmp	r2, r3
 8002880:	f080 8139 	bcs.w	8002af6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800288a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002896:	f000 8088 	beq.w	80029aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	330c      	adds	r3, #12
 80028a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028a8:	e853 3f00 	ldrex	r3, [r3]
 80028ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80028b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	330c      	adds	r3, #12
 80028c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80028c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80028ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80028d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028d6:	e841 2300 	strex	r3, r2, [r1]
 80028da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80028de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1d9      	bne.n	800289a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3314      	adds	r3, #20
 80028ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f0:	e853 3f00 	ldrex	r3, [r3]
 80028f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80028f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3314      	adds	r3, #20
 8002906:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800290a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800290e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002910:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002912:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002916:	e841 2300 	strex	r3, r2, [r1]
 800291a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800291c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1e1      	bne.n	80028e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	3314      	adds	r3, #20
 8002928:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800292c:	e853 3f00 	ldrex	r3, [r3]
 8002930:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002934:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002938:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3314      	adds	r3, #20
 8002942:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002946:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002948:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800294c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800294e:	e841 2300 	strex	r3, r2, [r1]
 8002952:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002954:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e3      	bne.n	8002922 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	330c      	adds	r3, #12
 800296e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002972:	e853 3f00 	ldrex	r3, [r3]
 8002976:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800297a:	f023 0310 	bic.w	r3, r3, #16
 800297e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	330c      	adds	r3, #12
 8002988:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800298c:	65ba      	str	r2, [r7, #88]	; 0x58
 800298e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002990:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002992:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002994:	e841 2300 	strex	r3, r2, [r1]
 8002998:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800299a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1e3      	bne.n	8002968 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe fb25 	bl	8000ff4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	4619      	mov	r1, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f8b6 	bl	8002b2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029c0:	e099      	b.n	8002af6 <HAL_UART_IRQHandler+0x50e>
 80029c2:	bf00      	nop
 80029c4:	08002d63 	.word	0x08002d63
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 808b 	beq.w	8002afa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80029e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8086 	beq.w	8002afa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	330c      	adds	r3, #12
 80029f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f8:	e853 3f00 	ldrex	r3, [r3]
 80029fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80029fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	330c      	adds	r3, #12
 8002a0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a12:	647a      	str	r2, [r7, #68]	; 0x44
 8002a14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a1a:	e841 2300 	strex	r3, r2, [r1]
 8002a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1e3      	bne.n	80029ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3314      	adds	r3, #20
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	e853 3f00 	ldrex	r3, [r3]
 8002a34:	623b      	str	r3, [r7, #32]
   return(result);
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3314      	adds	r3, #20
 8002a46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a4a:	633a      	str	r2, [r7, #48]	; 0x30
 8002a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a52:	e841 2300 	strex	r3, r2, [r1]
 8002a56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1e3      	bne.n	8002a26 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	330c      	adds	r3, #12
 8002a72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	e853 3f00 	ldrex	r3, [r3]
 8002a7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0310 	bic.w	r3, r3, #16
 8002a82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a90:	61fa      	str	r2, [r7, #28]
 8002a92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a94:	69b9      	ldr	r1, [r7, #24]
 8002a96:	69fa      	ldr	r2, [r7, #28]
 8002a98:	e841 2300 	strex	r3, r2, [r1]
 8002a9c:	617b      	str	r3, [r7, #20]
   return(result);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e3      	bne.n	8002a6c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002aa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f83e 	bl	8002b2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ab0:	e023      	b.n	8002afa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x4ea>
 8002abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f95d 	bl	8002d8a <UART_Transmit_IT>
    return;
 8002ad0:	e014      	b.n	8002afc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00e      	beq.n	8002afc <HAL_UART_IRQHandler+0x514>
 8002ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f99d 	bl	8002e2a <UART_EndTransmit_IT>
    return;
 8002af0:	e004      	b.n	8002afc <HAL_UART_IRQHandler+0x514>
    return;
 8002af2:	bf00      	nop
 8002af4:	e002      	b.n	8002afc <HAL_UART_IRQHandler+0x514>
      return;
 8002af6:	bf00      	nop
 8002af8:	e000      	b.n	8002afc <HAL_UART_IRQHandler+0x514>
      return;
 8002afa:	bf00      	nop
  }
}
 8002afc:	37e8      	adds	r7, #232	; 0xe8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop

08002b04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b090      	sub	sp, #64	; 0x40
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b54:	e050      	b.n	8002bf8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5c:	d04c      	beq.n	8002bf8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b64:	f7fe f958 	bl	8000e18 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d241      	bcs.n	8002bf8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	330c      	adds	r3, #12
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7e:	e853 3f00 	ldrex	r3, [r3]
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	330c      	adds	r3, #12
 8002b92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b94:	637a      	str	r2, [r7, #52]	; 0x34
 8002b96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b9c:	e841 2300 	strex	r3, r2, [r1]
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e5      	bne.n	8002b74 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3314      	adds	r3, #20
 8002bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	e853 3f00 	ldrex	r3, [r3]
 8002bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	3314      	adds	r3, #20
 8002bc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bc8:	623a      	str	r2, [r7, #32]
 8002bca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bcc:	69f9      	ldr	r1, [r7, #28]
 8002bce:	6a3a      	ldr	r2, [r7, #32]
 8002bd0:	e841 2300 	strex	r3, r2, [r1]
 8002bd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1e5      	bne.n	8002ba8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e00f      	b.n	8002c18 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	4013      	ands	r3, r2
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d09f      	beq.n	8002b56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3740      	adds	r7, #64	; 0x40
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	88fa      	ldrh	r2, [r7, #6]
 8002c38:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	88fa      	ldrh	r2, [r7, #6]
 8002c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2222      	movs	r2, #34	; 0x22
 8002c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c6c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0201 	orr.w	r2, r2, #1
 8002c7c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0220 	orr.w	r2, r2, #32
 8002c8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3714      	adds	r7, #20
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b095      	sub	sp, #84	; 0x54
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	330c      	adds	r3, #12
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cae:	e853 3f00 	ldrex	r3, [r3]
 8002cb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	330c      	adds	r3, #12
 8002cc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cc4:	643a      	str	r2, [r7, #64]	; 0x40
 8002cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002cca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ccc:	e841 2300 	strex	r3, r2, [r1]
 8002cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1e5      	bne.n	8002ca4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3314      	adds	r3, #20
 8002cde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	e853 3f00 	ldrex	r3, [r3]
 8002ce6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f023 0301 	bic.w	r3, r3, #1
 8002cee:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	3314      	adds	r3, #20
 8002cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d00:	e841 2300 	strex	r3, r2, [r1]
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1e5      	bne.n	8002cd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d119      	bne.n	8002d48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	330c      	adds	r3, #12
 8002d1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	e853 3f00 	ldrex	r3, [r3]
 8002d22:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f023 0310 	bic.w	r3, r3, #16
 8002d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	330c      	adds	r3, #12
 8002d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d34:	61ba      	str	r2, [r7, #24]
 8002d36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d38:	6979      	ldr	r1, [r7, #20]
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	e841 2300 	strex	r3, r2, [r1]
 8002d40:	613b      	str	r3, [r7, #16]
   return(result);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e5      	bne.n	8002d14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d56:	bf00      	nop
 8002d58:	3754      	adds	r7, #84	; 0x54
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f7ff fecb 	bl	8002b18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d82:	bf00      	nop
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b21      	cmp	r3, #33	; 0x21
 8002d9c:	d13e      	bne.n	8002e1c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002da6:	d114      	bne.n	8002dd2 <UART_Transmit_IT+0x48>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d110      	bne.n	8002dd2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dc4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	1c9a      	adds	r2, r3, #2
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	621a      	str	r2, [r3, #32]
 8002dd0:	e008      	b.n	8002de4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	1c59      	adds	r1, r3, #1
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6211      	str	r1, [r2, #32]
 8002ddc:	781a      	ldrb	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	4619      	mov	r1, r3
 8002df2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10f      	bne.n	8002e18 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e06:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e16:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e000      	b.n	8002e1e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e1c:	2302      	movs	r3, #2
  }
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e40:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff fe5a 	bl	8002b04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b08c      	sub	sp, #48	; 0x30
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b22      	cmp	r3, #34	; 0x22
 8002e6c:	f040 80ab 	bne.w	8002fc6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e78:	d117      	bne.n	8002eaa <UART_Receive_IT+0x50>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d113      	bne.n	8002eaa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	1c9a      	adds	r2, r3, #2
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ea8:	e026      	b.n	8002ef8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ebc:	d007      	beq.n	8002ece <UART_Receive_IT+0x74>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10a      	bne.n	8002edc <UART_Receive_IT+0x82>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	701a      	strb	r2, [r3, #0]
 8002eda:	e008      	b.n	8002eee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4619      	mov	r1, r3
 8002f06:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d15a      	bne.n	8002fc2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0220 	bic.w	r2, r2, #32
 8002f1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695a      	ldr	r2, [r3, #20]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d135      	bne.n	8002fb8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	330c      	adds	r3, #12
 8002f58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	e853 3f00 	ldrex	r3, [r3]
 8002f60:	613b      	str	r3, [r7, #16]
   return(result);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f023 0310 	bic.w	r3, r3, #16
 8002f68:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	330c      	adds	r3, #12
 8002f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f72:	623a      	str	r2, [r7, #32]
 8002f74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f76:	69f9      	ldr	r1, [r7, #28]
 8002f78:	6a3a      	ldr	r2, [r7, #32]
 8002f7a:	e841 2300 	strex	r3, r2, [r1]
 8002f7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1e5      	bne.n	8002f52 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d10a      	bne.n	8002faa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fae:	4619      	mov	r1, r3
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff fdbb 	bl	8002b2c <HAL_UARTEx_RxEventCallback>
 8002fb6:	e002      	b.n	8002fbe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7fd faab 	bl	8000514 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e002      	b.n	8002fc8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e000      	b.n	8002fc8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002fc6:	2302      	movs	r3, #2
  }
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3730      	adds	r7, #48	; 0x30
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fd4:	b0c0      	sub	sp, #256	; 0x100
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fec:	68d9      	ldr	r1, [r3, #12]
 8002fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	ea40 0301 	orr.w	r3, r0, r1
 8002ff8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	431a      	orrs	r2, r3
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	431a      	orrs	r2, r3
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003028:	f021 010c 	bic.w	r1, r1, #12
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003036:	430b      	orrs	r3, r1
 8003038:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800303a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800304a:	6999      	ldr	r1, [r3, #24]
 800304c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	ea40 0301 	orr.w	r3, r0, r1
 8003056:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	4b8f      	ldr	r3, [pc, #572]	; (800329c <UART_SetConfig+0x2cc>)
 8003060:	429a      	cmp	r2, r3
 8003062:	d005      	beq.n	8003070 <UART_SetConfig+0xa0>
 8003064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4b8d      	ldr	r3, [pc, #564]	; (80032a0 <UART_SetConfig+0x2d0>)
 800306c:	429a      	cmp	r2, r3
 800306e:	d104      	bne.n	800307a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003070:	f7fe fea6 	bl	8001dc0 <HAL_RCC_GetPCLK2Freq>
 8003074:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003078:	e003      	b.n	8003082 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800307a:	f7fe fe8d 	bl	8001d98 <HAL_RCC_GetPCLK1Freq>
 800307e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800308c:	f040 810c 	bne.w	80032a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003090:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003094:	2200      	movs	r2, #0
 8003096:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800309a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800309e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80030a2:	4622      	mov	r2, r4
 80030a4:	462b      	mov	r3, r5
 80030a6:	1891      	adds	r1, r2, r2
 80030a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80030aa:	415b      	adcs	r3, r3
 80030ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80030b2:	4621      	mov	r1, r4
 80030b4:	eb12 0801 	adds.w	r8, r2, r1
 80030b8:	4629      	mov	r1, r5
 80030ba:	eb43 0901 	adc.w	r9, r3, r1
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030d2:	4690      	mov	r8, r2
 80030d4:	4699      	mov	r9, r3
 80030d6:	4623      	mov	r3, r4
 80030d8:	eb18 0303 	adds.w	r3, r8, r3
 80030dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030e0:	462b      	mov	r3, r5
 80030e2:	eb49 0303 	adc.w	r3, r9, r3
 80030e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030fe:	460b      	mov	r3, r1
 8003100:	18db      	adds	r3, r3, r3
 8003102:	653b      	str	r3, [r7, #80]	; 0x50
 8003104:	4613      	mov	r3, r2
 8003106:	eb42 0303 	adc.w	r3, r2, r3
 800310a:	657b      	str	r3, [r7, #84]	; 0x54
 800310c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003110:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003114:	f7fd f85c 	bl	80001d0 <__aeabi_uldivmod>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4b61      	ldr	r3, [pc, #388]	; (80032a4 <UART_SetConfig+0x2d4>)
 800311e:	fba3 2302 	umull	r2, r3, r3, r2
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	011c      	lsls	r4, r3, #4
 8003126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800312a:	2200      	movs	r2, #0
 800312c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003130:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003134:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003138:	4642      	mov	r2, r8
 800313a:	464b      	mov	r3, r9
 800313c:	1891      	adds	r1, r2, r2
 800313e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003140:	415b      	adcs	r3, r3
 8003142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003144:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003148:	4641      	mov	r1, r8
 800314a:	eb12 0a01 	adds.w	sl, r2, r1
 800314e:	4649      	mov	r1, r9
 8003150:	eb43 0b01 	adc.w	fp, r3, r1
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003160:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003164:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003168:	4692      	mov	sl, r2
 800316a:	469b      	mov	fp, r3
 800316c:	4643      	mov	r3, r8
 800316e:	eb1a 0303 	adds.w	r3, sl, r3
 8003172:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003176:	464b      	mov	r3, r9
 8003178:	eb4b 0303 	adc.w	r3, fp, r3
 800317c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800318c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003190:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003194:	460b      	mov	r3, r1
 8003196:	18db      	adds	r3, r3, r3
 8003198:	643b      	str	r3, [r7, #64]	; 0x40
 800319a:	4613      	mov	r3, r2
 800319c:	eb42 0303 	adc.w	r3, r2, r3
 80031a0:	647b      	str	r3, [r7, #68]	; 0x44
 80031a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80031a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80031aa:	f7fd f811 	bl	80001d0 <__aeabi_uldivmod>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4611      	mov	r1, r2
 80031b4:	4b3b      	ldr	r3, [pc, #236]	; (80032a4 <UART_SetConfig+0x2d4>)
 80031b6:	fba3 2301 	umull	r2, r3, r3, r1
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	2264      	movs	r2, #100	; 0x64
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	1acb      	subs	r3, r1, r3
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80031ca:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <UART_SetConfig+0x2d4>)
 80031cc:	fba3 2302 	umull	r2, r3, r3, r2
 80031d0:	095b      	lsrs	r3, r3, #5
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031d8:	441c      	add	r4, r3
 80031da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031de:	2200      	movs	r2, #0
 80031e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80031e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80031ec:	4642      	mov	r2, r8
 80031ee:	464b      	mov	r3, r9
 80031f0:	1891      	adds	r1, r2, r2
 80031f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80031f4:	415b      	adcs	r3, r3
 80031f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031fc:	4641      	mov	r1, r8
 80031fe:	1851      	adds	r1, r2, r1
 8003200:	6339      	str	r1, [r7, #48]	; 0x30
 8003202:	4649      	mov	r1, r9
 8003204:	414b      	adcs	r3, r1
 8003206:	637b      	str	r3, [r7, #52]	; 0x34
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003214:	4659      	mov	r1, fp
 8003216:	00cb      	lsls	r3, r1, #3
 8003218:	4651      	mov	r1, sl
 800321a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800321e:	4651      	mov	r1, sl
 8003220:	00ca      	lsls	r2, r1, #3
 8003222:	4610      	mov	r0, r2
 8003224:	4619      	mov	r1, r3
 8003226:	4603      	mov	r3, r0
 8003228:	4642      	mov	r2, r8
 800322a:	189b      	adds	r3, r3, r2
 800322c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003230:	464b      	mov	r3, r9
 8003232:	460a      	mov	r2, r1
 8003234:	eb42 0303 	adc.w	r3, r2, r3
 8003238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800323c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003248:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800324c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003250:	460b      	mov	r3, r1
 8003252:	18db      	adds	r3, r3, r3
 8003254:	62bb      	str	r3, [r7, #40]	; 0x28
 8003256:	4613      	mov	r3, r2
 8003258:	eb42 0303 	adc.w	r3, r2, r3
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800325e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003262:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003266:	f7fc ffb3 	bl	80001d0 <__aeabi_uldivmod>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <UART_SetConfig+0x2d4>)
 8003270:	fba3 1302 	umull	r1, r3, r3, r2
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	2164      	movs	r1, #100	; 0x64
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	3332      	adds	r3, #50	; 0x32
 8003282:	4a08      	ldr	r2, [pc, #32]	; (80032a4 <UART_SetConfig+0x2d4>)
 8003284:	fba2 2303 	umull	r2, r3, r2, r3
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	f003 0207 	and.w	r2, r3, #7
 800328e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4422      	add	r2, r4
 8003296:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003298:	e105      	b.n	80034a6 <UART_SetConfig+0x4d6>
 800329a:	bf00      	nop
 800329c:	40011000 	.word	0x40011000
 80032a0:	40011400 	.word	0x40011400
 80032a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ac:	2200      	movs	r2, #0
 80032ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80032b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80032ba:	4642      	mov	r2, r8
 80032bc:	464b      	mov	r3, r9
 80032be:	1891      	adds	r1, r2, r2
 80032c0:	6239      	str	r1, [r7, #32]
 80032c2:	415b      	adcs	r3, r3
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
 80032c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032ca:	4641      	mov	r1, r8
 80032cc:	1854      	adds	r4, r2, r1
 80032ce:	4649      	mov	r1, r9
 80032d0:	eb43 0501 	adc.w	r5, r3, r1
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	00eb      	lsls	r3, r5, #3
 80032de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032e2:	00e2      	lsls	r2, r4, #3
 80032e4:	4614      	mov	r4, r2
 80032e6:	461d      	mov	r5, r3
 80032e8:	4643      	mov	r3, r8
 80032ea:	18e3      	adds	r3, r4, r3
 80032ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032f0:	464b      	mov	r3, r9
 80032f2:	eb45 0303 	adc.w	r3, r5, r3
 80032f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003306:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003316:	4629      	mov	r1, r5
 8003318:	008b      	lsls	r3, r1, #2
 800331a:	4621      	mov	r1, r4
 800331c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003320:	4621      	mov	r1, r4
 8003322:	008a      	lsls	r2, r1, #2
 8003324:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003328:	f7fc ff52 	bl	80001d0 <__aeabi_uldivmod>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4b60      	ldr	r3, [pc, #384]	; (80034b4 <UART_SetConfig+0x4e4>)
 8003332:	fba3 2302 	umull	r2, r3, r3, r2
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	011c      	lsls	r4, r3, #4
 800333a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800333e:	2200      	movs	r2, #0
 8003340:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003344:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003348:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800334c:	4642      	mov	r2, r8
 800334e:	464b      	mov	r3, r9
 8003350:	1891      	adds	r1, r2, r2
 8003352:	61b9      	str	r1, [r7, #24]
 8003354:	415b      	adcs	r3, r3
 8003356:	61fb      	str	r3, [r7, #28]
 8003358:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800335c:	4641      	mov	r1, r8
 800335e:	1851      	adds	r1, r2, r1
 8003360:	6139      	str	r1, [r7, #16]
 8003362:	4649      	mov	r1, r9
 8003364:	414b      	adcs	r3, r1
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003374:	4659      	mov	r1, fp
 8003376:	00cb      	lsls	r3, r1, #3
 8003378:	4651      	mov	r1, sl
 800337a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800337e:	4651      	mov	r1, sl
 8003380:	00ca      	lsls	r2, r1, #3
 8003382:	4610      	mov	r0, r2
 8003384:	4619      	mov	r1, r3
 8003386:	4603      	mov	r3, r0
 8003388:	4642      	mov	r2, r8
 800338a:	189b      	adds	r3, r3, r2
 800338c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003390:	464b      	mov	r3, r9
 8003392:	460a      	mov	r2, r1
 8003394:	eb42 0303 	adc.w	r3, r2, r3
 8003398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800339c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80033a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80033b4:	4649      	mov	r1, r9
 80033b6:	008b      	lsls	r3, r1, #2
 80033b8:	4641      	mov	r1, r8
 80033ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033be:	4641      	mov	r1, r8
 80033c0:	008a      	lsls	r2, r1, #2
 80033c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80033c6:	f7fc ff03 	bl	80001d0 <__aeabi_uldivmod>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4b39      	ldr	r3, [pc, #228]	; (80034b4 <UART_SetConfig+0x4e4>)
 80033d0:	fba3 1302 	umull	r1, r3, r3, r2
 80033d4:	095b      	lsrs	r3, r3, #5
 80033d6:	2164      	movs	r1, #100	; 0x64
 80033d8:	fb01 f303 	mul.w	r3, r1, r3
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	3332      	adds	r3, #50	; 0x32
 80033e2:	4a34      	ldr	r2, [pc, #208]	; (80034b4 <UART_SetConfig+0x4e4>)
 80033e4:	fba2 2303 	umull	r2, r3, r2, r3
 80033e8:	095b      	lsrs	r3, r3, #5
 80033ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ee:	441c      	add	r4, r3
 80033f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033f4:	2200      	movs	r2, #0
 80033f6:	673b      	str	r3, [r7, #112]	; 0x70
 80033f8:	677a      	str	r2, [r7, #116]	; 0x74
 80033fa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033fe:	4642      	mov	r2, r8
 8003400:	464b      	mov	r3, r9
 8003402:	1891      	adds	r1, r2, r2
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	415b      	adcs	r3, r3
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800340e:	4641      	mov	r1, r8
 8003410:	1851      	adds	r1, r2, r1
 8003412:	6039      	str	r1, [r7, #0]
 8003414:	4649      	mov	r1, r9
 8003416:	414b      	adcs	r3, r1
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	f04f 0200 	mov.w	r2, #0
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003426:	4659      	mov	r1, fp
 8003428:	00cb      	lsls	r3, r1, #3
 800342a:	4651      	mov	r1, sl
 800342c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003430:	4651      	mov	r1, sl
 8003432:	00ca      	lsls	r2, r1, #3
 8003434:	4610      	mov	r0, r2
 8003436:	4619      	mov	r1, r3
 8003438:	4603      	mov	r3, r0
 800343a:	4642      	mov	r2, r8
 800343c:	189b      	adds	r3, r3, r2
 800343e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003440:	464b      	mov	r3, r9
 8003442:	460a      	mov	r2, r1
 8003444:	eb42 0303 	adc.w	r3, r2, r3
 8003448:	66fb      	str	r3, [r7, #108]	; 0x6c
 800344a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	663b      	str	r3, [r7, #96]	; 0x60
 8003454:	667a      	str	r2, [r7, #100]	; 0x64
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003462:	4649      	mov	r1, r9
 8003464:	008b      	lsls	r3, r1, #2
 8003466:	4641      	mov	r1, r8
 8003468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800346c:	4641      	mov	r1, r8
 800346e:	008a      	lsls	r2, r1, #2
 8003470:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003474:	f7fc feac 	bl	80001d0 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <UART_SetConfig+0x4e4>)
 800347e:	fba3 1302 	umull	r1, r3, r3, r2
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	2164      	movs	r1, #100	; 0x64
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	3332      	adds	r3, #50	; 0x32
 8003490:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <UART_SetConfig+0x4e4>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	f003 020f 	and.w	r2, r3, #15
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4422      	add	r2, r4
 80034a4:	609a      	str	r2, [r3, #8]
}
 80034a6:	bf00      	nop
 80034a8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80034ac:	46bd      	mov	sp, r7
 80034ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034b2:	bf00      	nop
 80034b4:	51eb851f 	.word	0x51eb851f

080034b8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f103 0208 	add.w	r2, r3, #8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f04f 32ff 	mov.w	r2, #4294967295
 80034d0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f103 0208 	add.w	r2, r3, #8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f103 0208 	add.w	r2, r3, #8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d103      	bne.n	8003532 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e00c      	b.n	800354c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3308      	adds	r3, #8
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	e002      	b.n	8003540 <vListInsert+0x2e>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	429a      	cmp	r2, r3
 800354a:	d2f6      	bcs.n	800353a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	601a      	str	r2, [r3, #0]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6892      	ldr	r2, [r2, #8]
 800359a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6852      	ldr	r2, [r2, #4]
 80035a4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d103      	bne.n	80035b8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	1e5a      	subs	r2, r3, #1
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80035e2:	2301      	movs	r3, #1
 80035e4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10a      	bne.n	8003606 <xQueueGenericReset+0x2e>
        __asm volatile
 80035f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f4:	f383 8811 	msr	BASEPRI, r3
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	60fb      	str	r3, [r7, #12]
    }
 8003602:	bf00      	nop
 8003604:	e7fe      	b.n	8003604 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d05d      	beq.n	80036c8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003610:	2b00      	cmp	r3, #0
 8003612:	d059      	beq.n	80036c8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361c:	2100      	movs	r1, #0
 800361e:	fba3 2302 	umull	r2, r3, r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d000      	beq.n	8003628 <xQueueGenericReset+0x50>
 8003626:	2101      	movs	r1, #1
 8003628:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800362a:	2b00      	cmp	r3, #0
 800362c:	d14c      	bne.n	80036c8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800362e:	f001 fe1b 	bl	8005268 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363a:	6939      	ldr	r1, [r7, #16]
 800363c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	441a      	add	r2, r3
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2200      	movs	r2, #0
 800364c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365e:	3b01      	subs	r3, #1
 8003660:	6939      	ldr	r1, [r7, #16]
 8003662:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003664:	fb01 f303 	mul.w	r3, r1, r3
 8003668:	441a      	add	r2, r3
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	22ff      	movs	r2, #255	; 0xff
 8003672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	22ff      	movs	r2, #255	; 0xff
 800367a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d114      	bne.n	80036ae <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01a      	beq.n	80036c2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	3310      	adds	r3, #16
 8003690:	4618      	mov	r0, r3
 8003692:	f000 ff8b 	bl	80045ac <xTaskRemoveFromEventList>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d012      	beq.n	80036c2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800369c:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <xQueueGenericReset+0x11c>)
 800369e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	f3bf 8f6f 	isb	sy
 80036ac:	e009      	b.n	80036c2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	3310      	adds	r3, #16
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff ff00 	bl	80034b8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	3324      	adds	r3, #36	; 0x24
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fefb 	bl	80034b8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80036c2:	f001 fe01 	bl	80052c8 <vPortExitCritical>
 80036c6:	e001      	b.n	80036cc <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <xQueueGenericReset+0x110>
        __asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	60bb      	str	r3, [r7, #8]
    }
 80036e4:	bf00      	nop
 80036e6:	e7fe      	b.n	80036e6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80036e8:	697b      	ldr	r3, [r7, #20]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	e000ed04 	.word	0xe000ed04

080036f8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	; 0x28
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	4613      	mov	r3, r2
 8003704:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003706:	2300      	movs	r3, #0
 8003708:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d02e      	beq.n	800376e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003710:	2100      	movs	r1, #0
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	fba3 2302 	umull	r2, r3, r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d000      	beq.n	8003720 <xQueueGenericCreate+0x28>
 800371e:	2101      	movs	r1, #1
 8003720:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003722:	2b00      	cmp	r3, #0
 8003724:	d123      	bne.n	800376e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800372e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003732:	d81c      	bhi.n	800376e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	fb02 f303 	mul.w	r3, r2, r3
 800373c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	3350      	adds	r3, #80	; 0x50
 8003742:	4618      	mov	r0, r3
 8003744:	f001 fe72 	bl	800542c <pvPortMalloc>
 8003748:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01c      	beq.n	800378a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	3350      	adds	r3, #80	; 0x50
 8003758:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800375a:	79fa      	ldrb	r2, [r7, #7]
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f814 	bl	8003794 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800376c:	e00d      	b.n	800378a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <xQueueGenericCreate+0x92>
        __asm volatile
 8003774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	613b      	str	r3, [r7, #16]
    }
 8003786:	bf00      	nop
 8003788:	e7fe      	b.n	8003788 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800378a:	69fb      	ldr	r3, [r7, #28]
    }
 800378c:	4618      	mov	r0, r3
 800378e:	3720      	adds	r7, #32
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d103      	bne.n	80037b0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e002      	b.n	80037b6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037c2:	2101      	movs	r1, #1
 80037c4:	69b8      	ldr	r0, [r7, #24]
 80037c6:	f7ff ff07 	bl	80035d8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08c      	sub	sp, #48	; 0x30
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10a      	bne.n	800380c <xQueueReceive+0x30>
        __asm volatile
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	623b      	str	r3, [r7, #32]
    }
 8003808:	bf00      	nop
 800380a:	e7fe      	b.n	800380a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d103      	bne.n	800381a <xQueueReceive+0x3e>
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <xQueueReceive+0x42>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <xQueueReceive+0x44>
 800381e:	2300      	movs	r3, #0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10a      	bne.n	800383a <xQueueReceive+0x5e>
        __asm volatile
 8003824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	61fb      	str	r3, [r7, #28]
    }
 8003836:	bf00      	nop
 8003838:	e7fe      	b.n	8003838 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800383a:	f001 f8c7 	bl	80049cc <xTaskGetSchedulerState>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <xQueueReceive+0x6e>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <xQueueReceive+0x72>
 800384a:	2301      	movs	r3, #1
 800384c:	e000      	b.n	8003850 <xQueueReceive+0x74>
 800384e:	2300      	movs	r3, #0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <xQueueReceive+0x8e>
        __asm volatile
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	61bb      	str	r3, [r7, #24]
    }
 8003866:	bf00      	nop
 8003868:	e7fe      	b.n	8003868 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800386a:	f001 fcfd 	bl	8005268 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	2b00      	cmp	r3, #0
 8003878:	d01f      	beq.n	80038ba <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800387e:	f000 f88d 	bl	800399c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	1e5a      	subs	r2, r3, #1
 8003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003888:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00f      	beq.n	80038b2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003894:	3310      	adds	r3, #16
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fe88 	bl	80045ac <xTaskRemoveFromEventList>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d007      	beq.n	80038b2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80038a2:	4b3d      	ldr	r3, [pc, #244]	; (8003998 <xQueueReceive+0x1bc>)
 80038a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80038b2:	f001 fd09 	bl	80052c8 <vPortExitCritical>
                return pdPASS;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e069      	b.n	800398e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d103      	bne.n	80038c8 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80038c0:	f001 fd02 	bl	80052c8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80038c4:	2300      	movs	r3, #0
 80038c6:	e062      	b.n	800398e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80038c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80038ce:	f107 0310 	add.w	r3, r7, #16
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 ff40 	bl	8004758 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80038d8:	2301      	movs	r3, #1
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80038dc:	f001 fcf4 	bl	80052c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80038e0:	f000 fb6e 	bl	8003fc0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80038e4:	f001 fcc0 	bl	8005268 <vPortEnterCritical>
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038ee:	b25b      	sxtb	r3, r3
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d103      	bne.n	80038fe <xQueueReceive+0x122>
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003900:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003904:	b25b      	sxtb	r3, r3
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390a:	d103      	bne.n	8003914 <xQueueReceive+0x138>
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003914:	f001 fcd8 	bl	80052c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003918:	1d3a      	adds	r2, r7, #4
 800391a:	f107 0310 	add.w	r3, r7, #16
 800391e:	4611      	mov	r1, r2
 8003920:	4618      	mov	r0, r3
 8003922:	f000 ff2f 	bl	8004784 <xTaskCheckForTimeOut>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d123      	bne.n	8003974 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800392c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800392e:	f000 f8ad 	bl	8003a8c <prvIsQueueEmpty>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d017      	beq.n	8003968 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393a:	3324      	adds	r3, #36	; 0x24
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fdc9 	bl	80044d8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003948:	f000 f84e 	bl	80039e8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800394c:	f000 fb46 	bl	8003fdc <xTaskResumeAll>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d189      	bne.n	800386a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <xQueueReceive+0x1bc>)
 8003958:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	e780      	b.n	800386a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800396a:	f000 f83d 	bl	80039e8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800396e:	f000 fb35 	bl	8003fdc <xTaskResumeAll>
 8003972:	e77a      	b.n	800386a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003974:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003976:	f000 f837 	bl	80039e8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800397a:	f000 fb2f 	bl	8003fdc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800397e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003980:	f000 f884 	bl	8003a8c <prvIsQueueEmpty>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	f43f af6f 	beq.w	800386a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800398c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800398e:	4618      	mov	r0, r3
 8003990:	3730      	adds	r7, #48	; 0x30
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	e000ed04 	.word	0xe000ed04

0800399c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d018      	beq.n	80039e0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	441a      	add	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d303      	bcc.n	80039d0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68d9      	ldr	r1, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	461a      	mov	r2, r3
 80039da:	6838      	ldr	r0, [r7, #0]
 80039dc:	f001 ff48 	bl	8005870 <memcpy>
    }
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80039f0:	f001 fc3a 	bl	8005268 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039fa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80039fc:	e011      	b.n	8003a22 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d012      	beq.n	8003a2c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3324      	adds	r3, #36	; 0x24
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fdce 	bl	80045ac <xTaskRemoveFromEventList>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003a16:	f000 ff1b 	bl	8004850 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	dce9      	bgt.n	80039fe <prvUnlockQueue+0x16>
 8003a2a:	e000      	b.n	8003a2e <prvUnlockQueue+0x46>
                        break;
 8003a2c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	22ff      	movs	r2, #255	; 0xff
 8003a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003a36:	f001 fc47 	bl	80052c8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003a3a:	f001 fc15 	bl	8005268 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a44:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a46:	e011      	b.n	8003a6c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d012      	beq.n	8003a76 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3310      	adds	r3, #16
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fda9 	bl	80045ac <xTaskRemoveFromEventList>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003a60:	f000 fef6 	bl	8004850 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003a64:	7bbb      	ldrb	r3, [r7, #14]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	dce9      	bgt.n	8003a48 <prvUnlockQueue+0x60>
 8003a74:	e000      	b.n	8003a78 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003a76:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	22ff      	movs	r2, #255	; 0xff
 8003a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003a80:	f001 fc22 	bl	80052c8 <vPortExitCritical>
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003a94:	f001 fbe8 	bl	8005268 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d102      	bne.n	8003aa6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	e001      	b.n	8003aaa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003aaa:	f001 fc0d 	bl	80052c8 <vPortExitCritical>

    return xReturn;
 8003aae:	68fb      	ldr	r3, [r7, #12]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <vQueueAddToRegistry+0x26>
        __asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	60fb      	str	r3, [r7, #12]
    }
 8003ada:	bf00      	nop
 8003adc:	e7fe      	b.n	8003adc <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d024      	beq.n	8003b32 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	e01e      	b.n	8003b2c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003aee:	4a18      	ldr	r2, [pc, #96]	; (8003b50 <vQueueAddToRegistry+0x98>)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4413      	add	r3, r2
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d105      	bne.n	8003b0a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4a13      	ldr	r2, [pc, #76]	; (8003b50 <vQueueAddToRegistry+0x98>)
 8003b04:	4413      	add	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
                    break;
 8003b08:	e013      	b.n	8003b32 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10a      	bne.n	8003b26 <vQueueAddToRegistry+0x6e>
 8003b10:	4a0f      	ldr	r2, [pc, #60]	; (8003b50 <vQueueAddToRegistry+0x98>)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d104      	bne.n	8003b26 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4a0b      	ldr	r2, [pc, #44]	; (8003b50 <vQueueAddToRegistry+0x98>)
 8003b22:	4413      	add	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	2b07      	cmp	r3, #7
 8003b30:	d9dd      	bls.n	8003aee <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003b44:	bf00      	nop
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	20000110 	.word	0x20000110

08003b54 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003b64:	f001 fb80 	bl	8005268 <vPortEnterCritical>
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b6e:	b25b      	sxtb	r3, r3
 8003b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b74:	d103      	bne.n	8003b7e <vQueueWaitForMessageRestricted+0x2a>
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b84:	b25b      	sxtb	r3, r3
 8003b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8a:	d103      	bne.n	8003b94 <vQueueWaitForMessageRestricted+0x40>
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b94:	f001 fb98 	bl	80052c8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	3324      	adds	r3, #36	; 0x24
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fcb9 	bl	8004520 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003bae:	6978      	ldr	r0, [r7, #20]
 8003bb0:	f7ff ff1a 	bl	80039e8 <prvUnlockQueue>
    }
 8003bb4:	bf00      	nop
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08c      	sub	sp, #48	; 0x30
 8003bc0:	af04      	add	r7, sp, #16
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f001 fc2b 	bl	800542c <pvPortMalloc>
 8003bd6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00e      	beq.n	8003bfc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bde:	2058      	movs	r0, #88	; 0x58
 8003be0:	f001 fc24 	bl	800542c <pvPortMalloc>
 8003be4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8003bf2:	e005      	b.n	8003c00 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8003bf4:	6978      	ldr	r0, [r7, #20]
 8003bf6:	f001 fcf9 	bl	80055ec <vPortFree>
 8003bfa:	e001      	b.n	8003c00 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d013      	beq.n	8003c2e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c06:	88fa      	ldrh	r2, [r7, #6]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	9303      	str	r3, [sp, #12]
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	9302      	str	r3, [sp, #8]
 8003c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68b9      	ldr	r1, [r7, #8]
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 f80e 	bl	8003c3e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003c22:	69f8      	ldr	r0, [r7, #28]
 8003c24:	f000 f8b0 	bl	8003d88 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	e002      	b.n	8003c34 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c32:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003c34:	69bb      	ldr	r3, [r7, #24]
    }
 8003c36:	4618      	mov	r0, r3
 8003c38:	3720      	adds	r7, #32
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b088      	sub	sp, #32
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	60f8      	str	r0, [r7, #12]
 8003c46:	60b9      	str	r1, [r7, #8]
 8003c48:	607a      	str	r2, [r7, #4]
 8003c4a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	461a      	mov	r2, r3
 8003c56:	21a5      	movs	r1, #165	; 0xa5
 8003c58:	f001 fe18 	bl	800588c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c66:	3b01      	subs	r3, #1
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	f023 0307 	bic.w	r3, r3, #7
 8003c74:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <prvInitialiseNewTask+0x58>
        __asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	617b      	str	r3, [r7, #20]
    }
 8003c92:	bf00      	nop
 8003c94:	e7fe      	b.n	8003c94 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d01f      	beq.n	8003cdc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61fb      	str	r3, [r7, #28]
 8003ca0:	e012      	b.n	8003cc8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	7819      	ldrb	r1, [r3, #0]
 8003caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	4413      	add	r3, r2
 8003cb0:	3334      	adds	r3, #52	; 0x34
 8003cb2:	460a      	mov	r2, r1
 8003cb4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	4413      	add	r3, r2
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d006      	beq.n	8003cd0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	61fb      	str	r3, [r7, #28]
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	2b09      	cmp	r3, #9
 8003ccc:	d9e9      	bls.n	8003ca2 <prvInitialiseNewTask+0x64>
 8003cce:	e000      	b.n	8003cd2 <prvInitialiseNewTask+0x94>
            {
                break;
 8003cd0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003cda:	e003      	b.n	8003ce4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d90a      	bls.n	8003d00 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	613b      	str	r3, [r7, #16]
    }
 8003cfc:	bf00      	nop
 8003cfe:	e7fe      	b.n	8003cfe <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d901      	bls.n	8003d0a <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d06:	2304      	movs	r3, #4
 8003d08:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d14:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	2200      	movs	r2, #0
 8003d1a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1e:	3304      	adds	r3, #4
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fbe9 	bl	80034f8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	3318      	adds	r3, #24
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff fbe4 	bl	80034f8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d34:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	f1c3 0205 	rsb	r2, r3, #5
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d44:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	3350      	adds	r3, #80	; 0x50
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f001 fd9c 	bl	800588c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d56:	3354      	adds	r3, #84	; 0x54
 8003d58:	2201      	movs	r2, #1
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f001 fd95 	bl	800588c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	68f9      	ldr	r1, [r7, #12]
 8003d66:	69b8      	ldr	r0, [r7, #24]
 8003d68:	f001 f952 	bl	8005010 <pxPortInitialiseStack>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d70:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d7c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d7e:	bf00      	nop
 8003d80:	3720      	adds	r7, #32
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003d90:	f001 fa6a 	bl	8005268 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003d94:	4b40      	ldr	r3, [pc, #256]	; (8003e98 <prvAddNewTaskToReadyList+0x110>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	4a3f      	ldr	r2, [pc, #252]	; (8003e98 <prvAddNewTaskToReadyList+0x110>)
 8003d9c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003d9e:	4b3f      	ldr	r3, [pc, #252]	; (8003e9c <prvAddNewTaskToReadyList+0x114>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d109      	bne.n	8003dba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003da6:	4a3d      	ldr	r2, [pc, #244]	; (8003e9c <prvAddNewTaskToReadyList+0x114>)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dac:	4b3a      	ldr	r3, [pc, #232]	; (8003e98 <prvAddNewTaskToReadyList+0x110>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d110      	bne.n	8003dd6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003db4:	f000 fd70 	bl	8004898 <prvInitialiseTaskLists>
 8003db8:	e00d      	b.n	8003dd6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003dba:	4b39      	ldr	r3, [pc, #228]	; (8003ea0 <prvAddNewTaskToReadyList+0x118>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d109      	bne.n	8003dd6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003dc2:	4b36      	ldr	r3, [pc, #216]	; (8003e9c <prvAddNewTaskToReadyList+0x114>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d802      	bhi.n	8003dd6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003dd0:	4a32      	ldr	r2, [pc, #200]	; (8003e9c <prvAddNewTaskToReadyList+0x114>)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003dd6:	4b33      	ldr	r3, [pc, #204]	; (8003ea4 <prvAddNewTaskToReadyList+0x11c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	4a31      	ldr	r2, [pc, #196]	; (8003ea4 <prvAddNewTaskToReadyList+0x11c>)
 8003dde:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003de0:	4b30      	ldr	r3, [pc, #192]	; (8003ea4 <prvAddNewTaskToReadyList+0x11c>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	2201      	movs	r2, #1
 8003dee:	409a      	lsls	r2, r3
 8003df0:	4b2d      	ldr	r3, [pc, #180]	; (8003ea8 <prvAddNewTaskToReadyList+0x120>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	4a2c      	ldr	r2, [pc, #176]	; (8003ea8 <prvAddNewTaskToReadyList+0x120>)
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfe:	492b      	ldr	r1, [pc, #172]	; (8003eac <prvAddNewTaskToReadyList+0x124>)
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	60fb      	str	r3, [r7, #12]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	609a      	str	r2, [r3, #8]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	3204      	adds	r2, #4
 8003e26:	605a      	str	r2, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	1d1a      	adds	r2, r3, #4
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4a1b      	ldr	r2, [pc, #108]	; (8003eac <prvAddNewTaskToReadyList+0x124>)
 8003e3e:	441a      	add	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	615a      	str	r2, [r3, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e48:	4918      	ldr	r1, [pc, #96]	; (8003eac <prvAddNewTaskToReadyList+0x124>)
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	1c59      	adds	r1, r3, #1
 8003e58:	4814      	ldr	r0, [pc, #80]	; (8003eac <prvAddNewTaskToReadyList+0x124>)
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4403      	add	r3, r0
 8003e64:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003e66:	f001 fa2f 	bl	80052c8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <prvAddNewTaskToReadyList+0x118>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00e      	beq.n	8003e90 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e72:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <prvAddNewTaskToReadyList+0x114>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d207      	bcs.n	8003e90 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <prvAddNewTaskToReadyList+0x128>)
 8003e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e90:	bf00      	nop
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	20000228 	.word	0x20000228
 8003e9c:	20000150 	.word	0x20000150
 8003ea0:	20000234 	.word	0x20000234
 8003ea4:	20000244 	.word	0x20000244
 8003ea8:	20000230 	.word	0x20000230
 8003eac:	20000154 	.word	0x20000154
 8003eb0:	e000ed04 	.word	0xe000ed04

08003eb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d017      	beq.n	8003ef6 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003ec6:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <vTaskDelay+0x60>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <vTaskDelay+0x30>
        __asm volatile
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	60bb      	str	r3, [r7, #8]
    }
 8003ee0:	bf00      	nop
 8003ee2:	e7fe      	b.n	8003ee2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003ee4:	f000 f86c 	bl	8003fc0 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ee8:	2100      	movs	r1, #0
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fd8c 	bl	8004a08 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003ef0:	f000 f874 	bl	8003fdc <xTaskResumeAll>
 8003ef4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d107      	bne.n	8003f0c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <vTaskDelay+0x64>)
 8003efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003f0c:	bf00      	nop
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20000250 	.word	0x20000250
 8003f18:	e000ed04 	.word	0xe000ed04

08003f1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003f22:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <vTaskStartScheduler+0x88>)
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	2300      	movs	r3, #0
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2282      	movs	r2, #130	; 0x82
 8003f2e:	491e      	ldr	r1, [pc, #120]	; (8003fa8 <vTaskStartScheduler+0x8c>)
 8003f30:	481e      	ldr	r0, [pc, #120]	; (8003fac <vTaskStartScheduler+0x90>)
 8003f32:	f7ff fe43 	bl	8003bbc <xTaskCreate>
 8003f36:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d102      	bne.n	8003f44 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003f3e:	f000 fde3 	bl	8004b08 <xTimerCreateTimerTask>
 8003f42:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d116      	bne.n	8003f78 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	60bb      	str	r3, [r7, #8]
    }
 8003f5c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003f5e:	4b14      	ldr	r3, [pc, #80]	; (8003fb0 <vTaskStartScheduler+0x94>)
 8003f60:	f04f 32ff 	mov.w	r2, #4294967295
 8003f64:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003f66:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <vTaskStartScheduler+0x98>)
 8003f68:	2201      	movs	r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f6c:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <vTaskStartScheduler+0x9c>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003f72:	f001 f8d7 	bl	8005124 <xPortStartScheduler>
 8003f76:	e00e      	b.n	8003f96 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7e:	d10a      	bne.n	8003f96 <vTaskStartScheduler+0x7a>
        __asm volatile
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	607b      	str	r3, [r7, #4]
    }
 8003f92:	bf00      	nop
 8003f94:	e7fe      	b.n	8003f94 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003f96:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <vTaskStartScheduler+0xa0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
}
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	2000024c 	.word	0x2000024c
 8003fa8:	080058c4 	.word	0x080058c4
 8003fac:	08004869 	.word	0x08004869
 8003fb0:	20000248 	.word	0x20000248
 8003fb4:	20000234 	.word	0x20000234
 8003fb8:	2000022c 	.word	0x2000022c
 8003fbc:	2000000c 	.word	0x2000000c

08003fc0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003fc4:	4b04      	ldr	r3, [pc, #16]	; (8003fd8 <vTaskSuspendAll+0x18>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	4a03      	ldr	r2, [pc, #12]	; (8003fd8 <vTaskSuspendAll+0x18>)
 8003fcc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003fce:	bf00      	nop
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	20000250 	.word	0x20000250

08003fdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003fea:	4b71      	ldr	r3, [pc, #452]	; (80041b0 <xTaskResumeAll+0x1d4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <xTaskResumeAll+0x2c>
        __asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	607b      	str	r3, [r7, #4]
    }
 8004004:	bf00      	nop
 8004006:	e7fe      	b.n	8004006 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004008:	f001 f92e 	bl	8005268 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800400c:	4b68      	ldr	r3, [pc, #416]	; (80041b0 <xTaskResumeAll+0x1d4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3b01      	subs	r3, #1
 8004012:	4a67      	ldr	r2, [pc, #412]	; (80041b0 <xTaskResumeAll+0x1d4>)
 8004014:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004016:	4b66      	ldr	r3, [pc, #408]	; (80041b0 <xTaskResumeAll+0x1d4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	f040 80c0 	bne.w	80041a0 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004020:	4b64      	ldr	r3, [pc, #400]	; (80041b4 <xTaskResumeAll+0x1d8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 80bb 	beq.w	80041a0 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800402a:	e08a      	b.n	8004142 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800402c:	4b62      	ldr	r3, [pc, #392]	; (80041b8 <xTaskResumeAll+0x1dc>)
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	613b      	str	r3, [r7, #16]
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	69fa      	ldr	r2, [r7, #28]
 8004040:	6a12      	ldr	r2, [r2, #32]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	69d2      	ldr	r2, [r2, #28]
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	3318      	adds	r3, #24
 8004056:	429a      	cmp	r2, r3
 8004058:	d103      	bne.n	8004062 <xTaskResumeAll+0x86>
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	6a1a      	ldr	r2, [r3, #32]
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	2200      	movs	r2, #0
 8004066:	629a      	str	r2, [r3, #40]	; 0x28
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	1e5a      	subs	r2, r3, #1
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	69fa      	ldr	r2, [r7, #28]
 800407e:	68d2      	ldr	r2, [r2, #12]
 8004080:	609a      	str	r2, [r3, #8]
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	6892      	ldr	r2, [r2, #8]
 800408a:	605a      	str	r2, [r3, #4]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	3304      	adds	r3, #4
 8004094:	429a      	cmp	r2, r3
 8004096:	d103      	bne.n	80040a0 <xTaskResumeAll+0xc4>
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	605a      	str	r2, [r3, #4]
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2200      	movs	r2, #0
 80040a4:	615a      	str	r2, [r3, #20]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	1e5a      	subs	r2, r3, #1
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	2201      	movs	r2, #1
 80040b6:	409a      	lsls	r2, r3
 80040b8:	4b40      	ldr	r3, [pc, #256]	; (80041bc <xTaskResumeAll+0x1e0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4313      	orrs	r3, r2
 80040be:	4a3f      	ldr	r2, [pc, #252]	; (80041bc <xTaskResumeAll+0x1e0>)
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c6:	493e      	ldr	r1, [pc, #248]	; (80041c0 <xTaskResumeAll+0x1e4>)
 80040c8:	4613      	mov	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	3304      	adds	r3, #4
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	609a      	str	r2, [r3, #8]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	60da      	str	r2, [r3, #12]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	69fa      	ldr	r2, [r7, #28]
 80040ec:	3204      	adds	r2, #4
 80040ee:	605a      	str	r2, [r3, #4]
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	1d1a      	adds	r2, r3, #4
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4a2e      	ldr	r2, [pc, #184]	; (80041c0 <xTaskResumeAll+0x1e4>)
 8004106:	441a      	add	r2, r3
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	615a      	str	r2, [r3, #20]
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004110:	492b      	ldr	r1, [pc, #172]	; (80041c0 <xTaskResumeAll+0x1e4>)
 8004112:	4613      	mov	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	1c59      	adds	r1, r3, #1
 8004120:	4827      	ldr	r0, [pc, #156]	; (80041c0 <xTaskResumeAll+0x1e4>)
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4403      	add	r3, r0
 800412c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004132:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <xTaskResumeAll+0x1e8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	429a      	cmp	r2, r3
 800413a:	d302      	bcc.n	8004142 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 800413c:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <xTaskResumeAll+0x1ec>)
 800413e:	2201      	movs	r2, #1
 8004140:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004142:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <xTaskResumeAll+0x1dc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f47f af70 	bne.w	800402c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004152:	f000 fc1f 	bl	8004994 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004156:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <xTaskResumeAll+0x1f0>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d010      	beq.n	8004184 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004162:	f000 f847 	bl	80041f4 <xTaskIncrementTick>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d002      	beq.n	8004172 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 800416c:	4b16      	ldr	r3, [pc, #88]	; (80041c8 <xTaskResumeAll+0x1ec>)
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	3b01      	subs	r3, #1
 8004176:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f1      	bne.n	8004162 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800417e:	4b13      	ldr	r3, [pc, #76]	; (80041cc <xTaskResumeAll+0x1f0>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004184:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <xTaskResumeAll+0x1ec>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d009      	beq.n	80041a0 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800418c:	2301      	movs	r3, #1
 800418e:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004190:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <xTaskResumeAll+0x1f4>)
 8004192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80041a0:	f001 f892 	bl	80052c8 <vPortExitCritical>

    return xAlreadyYielded;
 80041a4:	69bb      	ldr	r3, [r7, #24]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000250 	.word	0x20000250
 80041b4:	20000228 	.word	0x20000228
 80041b8:	200001e8 	.word	0x200001e8
 80041bc:	20000230 	.word	0x20000230
 80041c0:	20000154 	.word	0x20000154
 80041c4:	20000150 	.word	0x20000150
 80041c8:	2000023c 	.word	0x2000023c
 80041cc:	20000238 	.word	0x20000238
 80041d0:	e000ed04 	.word	0xe000ed04

080041d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80041da:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <xTaskGetTickCount+0x1c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80041e0:	687b      	ldr	r3, [r7, #4]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	2000022c 	.word	0x2000022c

080041f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08a      	sub	sp, #40	; 0x28
 80041f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041fe:	4b7d      	ldr	r3, [pc, #500]	; (80043f4 <xTaskIncrementTick+0x200>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	f040 80ec 	bne.w	80043e0 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004208:	4b7b      	ldr	r3, [pc, #492]	; (80043f8 <xTaskIncrementTick+0x204>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3301      	adds	r3, #1
 800420e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004210:	4a79      	ldr	r2, [pc, #484]	; (80043f8 <xTaskIncrementTick+0x204>)
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d120      	bne.n	800425e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800421c:	4b77      	ldr	r3, [pc, #476]	; (80043fc <xTaskIncrementTick+0x208>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <xTaskIncrementTick+0x48>
        __asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	607b      	str	r3, [r7, #4]
    }
 8004238:	bf00      	nop
 800423a:	e7fe      	b.n	800423a <xTaskIncrementTick+0x46>
 800423c:	4b6f      	ldr	r3, [pc, #444]	; (80043fc <xTaskIncrementTick+0x208>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	61fb      	str	r3, [r7, #28]
 8004242:	4b6f      	ldr	r3, [pc, #444]	; (8004400 <xTaskIncrementTick+0x20c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a6d      	ldr	r2, [pc, #436]	; (80043fc <xTaskIncrementTick+0x208>)
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4a6d      	ldr	r2, [pc, #436]	; (8004400 <xTaskIncrementTick+0x20c>)
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	4b6c      	ldr	r3, [pc, #432]	; (8004404 <xTaskIncrementTick+0x210>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	3301      	adds	r3, #1
 8004256:	4a6b      	ldr	r2, [pc, #428]	; (8004404 <xTaskIncrementTick+0x210>)
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	f000 fb9b 	bl	8004994 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800425e:	4b6a      	ldr	r3, [pc, #424]	; (8004408 <xTaskIncrementTick+0x214>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6a3a      	ldr	r2, [r7, #32]
 8004264:	429a      	cmp	r2, r3
 8004266:	f0c0 80a6 	bcc.w	80043b6 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800426a:	4b64      	ldr	r3, [pc, #400]	; (80043fc <xTaskIncrementTick+0x208>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d104      	bne.n	800427e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004274:	4b64      	ldr	r3, [pc, #400]	; (8004408 <xTaskIncrementTick+0x214>)
 8004276:	f04f 32ff 	mov.w	r2, #4294967295
 800427a:	601a      	str	r2, [r3, #0]
                    break;
 800427c:	e09b      	b.n	80043b6 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800427e:	4b5f      	ldr	r3, [pc, #380]	; (80043fc <xTaskIncrementTick+0x208>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800428e:	6a3a      	ldr	r2, [r7, #32]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	429a      	cmp	r2, r3
 8004294:	d203      	bcs.n	800429e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004296:	4a5c      	ldr	r2, [pc, #368]	; (8004408 <xTaskIncrementTick+0x214>)
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800429c:	e08b      	b.n	80043b6 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	68d2      	ldr	r2, [r2, #12]
 80042ac:	609a      	str	r2, [r3, #8]
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	6892      	ldr	r2, [r2, #8]
 80042b6:	605a      	str	r2, [r3, #4]
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	3304      	adds	r3, #4
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d103      	bne.n	80042cc <xTaskIncrementTick+0xd8>
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	605a      	str	r2, [r3, #4]
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2200      	movs	r2, #0
 80042d0:	615a      	str	r2, [r3, #20]
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	1e5a      	subs	r2, r3, #1
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01e      	beq.n	8004322 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	6a12      	ldr	r2, [r2, #32]
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	69d2      	ldr	r2, [r2, #28]
 80042fc:	605a      	str	r2, [r3, #4]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	3318      	adds	r3, #24
 8004306:	429a      	cmp	r2, r3
 8004308:	d103      	bne.n	8004312 <xTaskIncrementTick+0x11e>
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	6a1a      	ldr	r2, [r3, #32]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	605a      	str	r2, [r3, #4]
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2200      	movs	r2, #0
 8004316:	629a      	str	r2, [r3, #40]	; 0x28
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	1e5a      	subs	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	2201      	movs	r2, #1
 8004328:	409a      	lsls	r2, r3
 800432a:	4b38      	ldr	r3, [pc, #224]	; (800440c <xTaskIncrementTick+0x218>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4313      	orrs	r3, r2
 8004330:	4a36      	ldr	r2, [pc, #216]	; (800440c <xTaskIncrementTick+0x218>)
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004338:	4935      	ldr	r1, [pc, #212]	; (8004410 <xTaskIncrementTick+0x21c>)
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	3304      	adds	r3, #4
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	60da      	str	r2, [r3, #12]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	3204      	adds	r2, #4
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	1d1a      	adds	r2, r3, #4
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	609a      	str	r2, [r3, #8]
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4a26      	ldr	r2, [pc, #152]	; (8004410 <xTaskIncrementTick+0x21c>)
 8004378:	441a      	add	r2, r3
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	615a      	str	r2, [r3, #20]
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004382:	4923      	ldr	r1, [pc, #140]	; (8004410 <xTaskIncrementTick+0x21c>)
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	1c59      	adds	r1, r3, #1
 8004392:	481f      	ldr	r0, [pc, #124]	; (8004410 <xTaskIncrementTick+0x21c>)
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4403      	add	r3, r0
 800439e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a4:	4b1b      	ldr	r3, [pc, #108]	; (8004414 <xTaskIncrementTick+0x220>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	429a      	cmp	r2, r3
 80043ac:	f4ff af5d 	bcc.w	800426a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80043b0:	2301      	movs	r3, #1
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043b4:	e759      	b.n	800426a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80043b6:	4b17      	ldr	r3, [pc, #92]	; (8004414 <xTaskIncrementTick+0x220>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043bc:	4914      	ldr	r1, [pc, #80]	; (8004410 <xTaskIncrementTick+0x21c>)
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d901      	bls.n	80043d2 <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 80043ce:	2301      	movs	r3, #1
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80043d2:	4b11      	ldr	r3, [pc, #68]	; (8004418 <xTaskIncrementTick+0x224>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 80043da:	2301      	movs	r3, #1
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
 80043de:	e004      	b.n	80043ea <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80043e0:	4b0e      	ldr	r3, [pc, #56]	; (800441c <xTaskIncrementTick+0x228>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3301      	adds	r3, #1
 80043e6:	4a0d      	ldr	r2, [pc, #52]	; (800441c <xTaskIncrementTick+0x228>)
 80043e8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3728      	adds	r7, #40	; 0x28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000250 	.word	0x20000250
 80043f8:	2000022c 	.word	0x2000022c
 80043fc:	200001e0 	.word	0x200001e0
 8004400:	200001e4 	.word	0x200001e4
 8004404:	20000240 	.word	0x20000240
 8004408:	20000248 	.word	0x20000248
 800440c:	20000230 	.word	0x20000230
 8004410:	20000154 	.word	0x20000154
 8004414:	20000150 	.word	0x20000150
 8004418:	2000023c 	.word	0x2000023c
 800441c:	20000238 	.word	0x20000238

08004420 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004426:	4b27      	ldr	r3, [pc, #156]	; (80044c4 <vTaskSwitchContext+0xa4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800442e:	4b26      	ldr	r3, [pc, #152]	; (80044c8 <vTaskSwitchContext+0xa8>)
 8004430:	2201      	movs	r2, #1
 8004432:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004434:	e03f      	b.n	80044b6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004436:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <vTaskSwitchContext+0xa8>)
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800443c:	4b23      	ldr	r3, [pc, #140]	; (80044cc <vTaskSwitchContext+0xac>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	fab3 f383 	clz	r3, r3
 8004448:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800444a:	7afb      	ldrb	r3, [r7, #11]
 800444c:	f1c3 031f 	rsb	r3, r3, #31
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	491f      	ldr	r1, [pc, #124]	; (80044d0 <vTaskSwitchContext+0xb0>)
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10a      	bne.n	800447c <vTaskSwitchContext+0x5c>
        __asm volatile
 8004466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	607b      	str	r3, [r7, #4]
    }
 8004478:	bf00      	nop
 800447a:	e7fe      	b.n	800447a <vTaskSwitchContext+0x5a>
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4a12      	ldr	r2, [pc, #72]	; (80044d0 <vTaskSwitchContext+0xb0>)
 8004488:	4413      	add	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	605a      	str	r2, [r3, #4]
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	3308      	adds	r3, #8
 800449e:	429a      	cmp	r2, r3
 80044a0:	d104      	bne.n	80044ac <vTaskSwitchContext+0x8c>
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	605a      	str	r2, [r3, #4]
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	4a08      	ldr	r2, [pc, #32]	; (80044d4 <vTaskSwitchContext+0xb4>)
 80044b4:	6013      	str	r3, [r2, #0]
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20000250 	.word	0x20000250
 80044c8:	2000023c 	.word	0x2000023c
 80044cc:	20000230 	.word	0x20000230
 80044d0:	20000154 	.word	0x20000154
 80044d4:	20000150 	.word	0x20000150

080044d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	60fb      	str	r3, [r7, #12]
    }
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <vTaskPlaceOnEventList+0x44>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	3318      	adds	r3, #24
 8004504:	4619      	mov	r1, r3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff f803 	bl	8003512 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800450c:	2101      	movs	r1, #1
 800450e:	6838      	ldr	r0, [r7, #0]
 8004510:	f000 fa7a 	bl	8004a08 <prvAddCurrentTaskToDelayedList>
}
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	20000150 	.word	0x20000150

08004520 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	613b      	str	r3, [r7, #16]
    }
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <vTaskPlaceOnEventListRestricted+0x88>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	61da      	str	r2, [r3, #28]
 8004556:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <vTaskPlaceOnEventListRestricted+0x88>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	6892      	ldr	r2, [r2, #8]
 800455e:	621a      	str	r2, [r3, #32]
 8004560:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <vTaskPlaceOnEventListRestricted+0x88>)
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	3218      	adds	r2, #24
 800456a:	605a      	str	r2, [r3, #4]
 800456c:	4b0e      	ldr	r3, [pc, #56]	; (80045a8 <vTaskPlaceOnEventListRestricted+0x88>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f103 0218 	add.w	r2, r3, #24
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	609a      	str	r2, [r3, #8]
 8004578:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <vTaskPlaceOnEventListRestricted+0x88>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	629a      	str	r2, [r3, #40]	; 0x28
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8004590:	f04f 33ff 	mov.w	r3, #4294967295
 8004594:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	68b8      	ldr	r0, [r7, #8]
 800459a:	f000 fa35 	bl	8004a08 <prvAddCurrentTaskToDelayedList>
    }
 800459e:	bf00      	nop
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000150 	.word	0x20000150

080045ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80045ac:	b480      	push	{r7}
 80045ae:	b08b      	sub	sp, #44	; 0x2c
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	60fb      	str	r3, [r7, #12]
    }
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045dc:	61fb      	str	r3, [r7, #28]
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	6a3a      	ldr	r2, [r7, #32]
 80045e4:	6a12      	ldr	r2, [r2, #32]
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	6a3b      	ldr	r3, [r7, #32]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	6a3a      	ldr	r2, [r7, #32]
 80045ee:	69d2      	ldr	r2, [r2, #28]
 80045f0:	605a      	str	r2, [r3, #4]
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	3318      	adds	r3, #24
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d103      	bne.n	8004606 <xTaskRemoveFromEventList+0x5a>
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	6a1a      	ldr	r2, [r3, #32]
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	2200      	movs	r2, #0
 800460a:	629a      	str	r2, [r3, #40]	; 0x28
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	1e5a      	subs	r2, r3, #1
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004616:	4b4a      	ldr	r3, [pc, #296]	; (8004740 <xTaskRemoveFromEventList+0x194>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d15e      	bne.n	80046dc <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	6a3a      	ldr	r2, [r7, #32]
 800462a:	68d2      	ldr	r2, [r2, #12]
 800462c:	609a      	str	r2, [r3, #8]
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	6a3a      	ldr	r2, [r7, #32]
 8004634:	6892      	ldr	r2, [r2, #8]
 8004636:	605a      	str	r2, [r3, #4]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	3304      	adds	r3, #4
 8004640:	429a      	cmp	r2, r3
 8004642:	d103      	bne.n	800464c <xTaskRemoveFromEventList+0xa0>
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	605a      	str	r2, [r3, #4]
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	2200      	movs	r2, #0
 8004650:	615a      	str	r2, [r3, #20]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	1e5a      	subs	r2, r3, #1
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	2201      	movs	r2, #1
 8004662:	409a      	lsls	r2, r3
 8004664:	4b37      	ldr	r3, [pc, #220]	; (8004744 <xTaskRemoveFromEventList+0x198>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4313      	orrs	r3, r2
 800466a:	4a36      	ldr	r2, [pc, #216]	; (8004744 <xTaskRemoveFromEventList+0x198>)
 800466c:	6013      	str	r3, [r2, #0]
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004672:	4935      	ldr	r1, [pc, #212]	; (8004748 <xTaskRemoveFromEventList+0x19c>)
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	3304      	adds	r3, #4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	609a      	str	r2, [r3, #8]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	60da      	str	r2, [r3, #12]
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	6a3a      	ldr	r2, [r7, #32]
 8004698:	3204      	adds	r2, #4
 800469a:	605a      	str	r2, [r3, #4]
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	1d1a      	adds	r2, r3, #4
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	609a      	str	r2, [r3, #8]
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4a25      	ldr	r2, [pc, #148]	; (8004748 <xTaskRemoveFromEventList+0x19c>)
 80046b2:	441a      	add	r2, r3
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	615a      	str	r2, [r3, #20]
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046bc:	4922      	ldr	r1, [pc, #136]	; (8004748 <xTaskRemoveFromEventList+0x19c>)
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	1c59      	adds	r1, r3, #1
 80046cc:	481e      	ldr	r0, [pc, #120]	; (8004748 <xTaskRemoveFromEventList+0x19c>)
 80046ce:	4613      	mov	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4413      	add	r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4403      	add	r3, r0
 80046d8:	6019      	str	r1, [r3, #0]
 80046da:	e01b      	b.n	8004714 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80046dc:	4b1b      	ldr	r3, [pc, #108]	; (800474c <xTaskRemoveFromEventList+0x1a0>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	61bb      	str	r3, [r7, #24]
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	61da      	str	r2, [r3, #28]
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	621a      	str	r2, [r3, #32]
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	6a3a      	ldr	r2, [r7, #32]
 80046f6:	3218      	adds	r2, #24
 80046f8:	605a      	str	r2, [r3, #4]
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	f103 0218 	add.w	r2, r3, #24
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	609a      	str	r2, [r3, #8]
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	4a11      	ldr	r2, [pc, #68]	; (800474c <xTaskRemoveFromEventList+0x1a0>)
 8004708:	629a      	str	r2, [r3, #40]	; 0x28
 800470a:	4b10      	ldr	r3, [pc, #64]	; (800474c <xTaskRemoveFromEventList+0x1a0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3301      	adds	r3, #1
 8004710:	4a0e      	ldr	r2, [pc, #56]	; (800474c <xTaskRemoveFromEventList+0x1a0>)
 8004712:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004718:	4b0d      	ldr	r3, [pc, #52]	; (8004750 <xTaskRemoveFromEventList+0x1a4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471e:	429a      	cmp	r2, r3
 8004720:	d905      	bls.n	800472e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004722:	2301      	movs	r3, #1
 8004724:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004726:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <xTaskRemoveFromEventList+0x1a8>)
 8004728:	2201      	movs	r2, #1
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	e001      	b.n	8004732 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800472e:	2300      	movs	r3, #0
 8004730:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004734:	4618      	mov	r0, r3
 8004736:	372c      	adds	r7, #44	; 0x2c
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	20000250 	.word	0x20000250
 8004744:	20000230 	.word	0x20000230
 8004748:	20000154 	.word	0x20000154
 800474c:	200001e8 	.word	0x200001e8
 8004750:	20000150 	.word	0x20000150
 8004754:	2000023c 	.word	0x2000023c

08004758 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004760:	4b06      	ldr	r3, [pc, #24]	; (800477c <vTaskInternalSetTimeOutState+0x24>)
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <vTaskInternalSetTimeOutState+0x28>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	605a      	str	r2, [r3, #4]
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	20000240 	.word	0x20000240
 8004780:	2000022c 	.word	0x2000022c

08004784 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	613b      	str	r3, [r7, #16]
    }
 80047a6:	bf00      	nop
 80047a8:	e7fe      	b.n	80047a8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10a      	bne.n	80047c6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	60fb      	str	r3, [r7, #12]
    }
 80047c2:	bf00      	nop
 80047c4:	e7fe      	b.n	80047c4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80047c6:	f000 fd4f 	bl	8005268 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80047ca:	4b1f      	ldr	r3, [pc, #124]	; (8004848 <xTaskCheckForTimeOut+0xc4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e2:	d102      	bne.n	80047ea <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61fb      	str	r3, [r7, #28]
 80047e8:	e026      	b.n	8004838 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4b17      	ldr	r3, [pc, #92]	; (800484c <xTaskCheckForTimeOut+0xc8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d00a      	beq.n	800480c <xTaskCheckForTimeOut+0x88>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d305      	bcc.n	800480c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004800:	2301      	movs	r3, #1
 8004802:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	e015      	b.n	8004838 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	429a      	cmp	r2, r3
 8004814:	d20b      	bcs.n	800482e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	1ad2      	subs	r2, r2, r3
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ff98 	bl	8004758 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004828:	2300      	movs	r3, #0
 800482a:	61fb      	str	r3, [r7, #28]
 800482c:	e004      	b.n	8004838 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004834:	2301      	movs	r3, #1
 8004836:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004838:	f000 fd46 	bl	80052c8 <vPortExitCritical>

    return xReturn;
 800483c:	69fb      	ldr	r3, [r7, #28]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3720      	adds	r7, #32
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	2000022c 	.word	0x2000022c
 800484c:	20000240 	.word	0x20000240

08004850 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004854:	4b03      	ldr	r3, [pc, #12]	; (8004864 <vTaskMissedYield+0x14>)
 8004856:	2201      	movs	r2, #1
 8004858:	601a      	str	r2, [r3, #0]
}
 800485a:	bf00      	nop
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	2000023c 	.word	0x2000023c

08004868 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004870:	f000 f852 	bl	8004918 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004874:	4b06      	ldr	r3, [pc, #24]	; (8004890 <prvIdleTask+0x28>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d9f9      	bls.n	8004870 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800487c:	4b05      	ldr	r3, [pc, #20]	; (8004894 <prvIdleTask+0x2c>)
 800487e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800488c:	e7f0      	b.n	8004870 <prvIdleTask+0x8>
 800488e:	bf00      	nop
 8004890:	20000154 	.word	0x20000154
 8004894:	e000ed04 	.word	0xe000ed04

08004898 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800489e:	2300      	movs	r3, #0
 80048a0:	607b      	str	r3, [r7, #4]
 80048a2:	e00c      	b.n	80048be <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4a12      	ldr	r2, [pc, #72]	; (80048f8 <prvInitialiseTaskLists+0x60>)
 80048b0:	4413      	add	r3, r2
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fe fe00 	bl	80034b8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3301      	adds	r3, #1
 80048bc:	607b      	str	r3, [r7, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d9ef      	bls.n	80048a4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80048c4:	480d      	ldr	r0, [pc, #52]	; (80048fc <prvInitialiseTaskLists+0x64>)
 80048c6:	f7fe fdf7 	bl	80034b8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80048ca:	480d      	ldr	r0, [pc, #52]	; (8004900 <prvInitialiseTaskLists+0x68>)
 80048cc:	f7fe fdf4 	bl	80034b8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80048d0:	480c      	ldr	r0, [pc, #48]	; (8004904 <prvInitialiseTaskLists+0x6c>)
 80048d2:	f7fe fdf1 	bl	80034b8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80048d6:	480c      	ldr	r0, [pc, #48]	; (8004908 <prvInitialiseTaskLists+0x70>)
 80048d8:	f7fe fdee 	bl	80034b8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80048dc:	480b      	ldr	r0, [pc, #44]	; (800490c <prvInitialiseTaskLists+0x74>)
 80048de:	f7fe fdeb 	bl	80034b8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80048e2:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <prvInitialiseTaskLists+0x78>)
 80048e4:	4a05      	ldr	r2, [pc, #20]	; (80048fc <prvInitialiseTaskLists+0x64>)
 80048e6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80048e8:	4b0a      	ldr	r3, [pc, #40]	; (8004914 <prvInitialiseTaskLists+0x7c>)
 80048ea:	4a05      	ldr	r2, [pc, #20]	; (8004900 <prvInitialiseTaskLists+0x68>)
 80048ec:	601a      	str	r2, [r3, #0]
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20000154 	.word	0x20000154
 80048fc:	200001b8 	.word	0x200001b8
 8004900:	200001cc 	.word	0x200001cc
 8004904:	200001e8 	.word	0x200001e8
 8004908:	200001fc 	.word	0x200001fc
 800490c:	20000214 	.word	0x20000214
 8004910:	200001e0 	.word	0x200001e0
 8004914:	200001e4 	.word	0x200001e4

08004918 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800491e:	e019      	b.n	8004954 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004920:	f000 fca2 	bl	8005268 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004924:	4b10      	ldr	r3, [pc, #64]	; (8004968 <prvCheckTasksWaitingTermination+0x50>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	4618      	mov	r0, r3
 8004932:	f7fe fe27 	bl	8003584 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004936:	4b0d      	ldr	r3, [pc, #52]	; (800496c <prvCheckTasksWaitingTermination+0x54>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3b01      	subs	r3, #1
 800493c:	4a0b      	ldr	r2, [pc, #44]	; (800496c <prvCheckTasksWaitingTermination+0x54>)
 800493e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <prvCheckTasksWaitingTermination+0x58>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3b01      	subs	r3, #1
 8004946:	4a0a      	ldr	r2, [pc, #40]	; (8004970 <prvCheckTasksWaitingTermination+0x58>)
 8004948:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800494a:	f000 fcbd 	bl	80052c8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f810 	bl	8004974 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004954:	4b06      	ldr	r3, [pc, #24]	; (8004970 <prvCheckTasksWaitingTermination+0x58>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e1      	bne.n	8004920 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800495c:	bf00      	nop
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	200001fc 	.word	0x200001fc
 800496c:	20000228 	.word	0x20000228
 8004970:	20000210 	.word	0x20000210

08004974 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fe33 	bl	80055ec <vPortFree>
                vPortFree( pxTCB );
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fe30 	bl	80055ec <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800498c:	bf00      	nop
 800498e:	3708      	adds	r7, #8
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004998:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <prvResetNextTaskUnblockTime+0x30>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80049a2:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <prvResetNextTaskUnblockTime+0x34>)
 80049a4:	f04f 32ff 	mov.w	r2, #4294967295
 80049a8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80049aa:	e005      	b.n	80049b8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049ac:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <prvResetNextTaskUnblockTime+0x30>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <prvResetNextTaskUnblockTime+0x34>)
 80049b6:	6013      	str	r3, [r2, #0]
}
 80049b8:	bf00      	nop
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	200001e0 	.word	0x200001e0
 80049c8:	20000248 	.word	0x20000248

080049cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80049d2:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <xTaskGetSchedulerState+0x34>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d102      	bne.n	80049e0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80049da:	2301      	movs	r3, #1
 80049dc:	607b      	str	r3, [r7, #4]
 80049de:	e008      	b.n	80049f2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049e0:	4b08      	ldr	r3, [pc, #32]	; (8004a04 <xTaskGetSchedulerState+0x38>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d102      	bne.n	80049ee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80049e8:	2302      	movs	r3, #2
 80049ea:	607b      	str	r3, [r7, #4]
 80049ec:	e001      	b.n	80049f2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80049ee:	2300      	movs	r3, #0
 80049f0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80049f2:	687b      	ldr	r3, [r7, #4]
    }
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	20000234 	.word	0x20000234
 8004a04:	20000250 	.word	0x20000250

08004a08 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004a12:	4b36      	ldr	r3, [pc, #216]	; (8004aec <prvAddCurrentTaskToDelayedList+0xe4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a18:	4b35      	ldr	r3, [pc, #212]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe fdb0 	bl	8003584 <uxListRemove>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10b      	bne.n	8004a42 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a2a:	4b31      	ldr	r3, [pc, #196]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	2201      	movs	r2, #1
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	43da      	mvns	r2, r3
 8004a38:	4b2e      	ldr	r3, [pc, #184]	; (8004af4 <prvAddCurrentTaskToDelayedList+0xec>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	4a2d      	ldr	r2, [pc, #180]	; (8004af4 <prvAddCurrentTaskToDelayedList+0xec>)
 8004a40:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a48:	d124      	bne.n	8004a94 <prvAddCurrentTaskToDelayedList+0x8c>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d021      	beq.n	8004a94 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a50:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	4b26      	ldr	r3, [pc, #152]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	609a      	str	r2, [r3, #8]
 8004a5e:	4b24      	ldr	r3, [pc, #144]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	6892      	ldr	r2, [r2, #8]
 8004a66:	60da      	str	r2, [r3, #12]
 8004a68:	4b21      	ldr	r3, [pc, #132]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	3204      	adds	r2, #4
 8004a72:	605a      	str	r2, [r3, #4]
 8004a74:	4b1e      	ldr	r3, [pc, #120]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	1d1a      	adds	r2, r3, #4
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	609a      	str	r2, [r3, #8]
 8004a7e:	4b1c      	ldr	r3, [pc, #112]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a1d      	ldr	r2, [pc, #116]	; (8004af8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004a84:	615a      	str	r2, [r3, #20]
 8004a86:	4b1c      	ldr	r3, [pc, #112]	; (8004af8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	4a1a      	ldr	r2, [pc, #104]	; (8004af8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004a92:	e026      	b.n	8004ae2 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4413      	add	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004a9c:	4b14      	ldr	r3, [pc, #80]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d209      	bcs.n	8004ac0 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aac:	4b13      	ldr	r3, [pc, #76]	; (8004afc <prvAddCurrentTaskToDelayedList+0xf4>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	4b0f      	ldr	r3, [pc, #60]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4610      	mov	r0, r2
 8004aba:	f7fe fd2a 	bl	8003512 <vListInsert>
}
 8004abe:	e010      	b.n	8004ae2 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3304      	adds	r3, #4
 8004aca:	4619      	mov	r1, r3
 8004acc:	4610      	mov	r0, r2
 8004ace:	f7fe fd20 	bl	8003512 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d202      	bcs.n	8004ae2 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8004adc:	4a09      	ldr	r2, [pc, #36]	; (8004b04 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6013      	str	r3, [r2, #0]
}
 8004ae2:	bf00      	nop
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	2000022c 	.word	0x2000022c
 8004af0:	20000150 	.word	0x20000150
 8004af4:	20000230 	.word	0x20000230
 8004af8:	20000214 	.word	0x20000214
 8004afc:	200001e4 	.word	0x200001e4
 8004b00:	200001e0 	.word	0x200001e0
 8004b04:	20000248 	.word	0x20000248

08004b08 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004b12:	f000 fa47 	bl	8004fa4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004b16:	4b11      	ldr	r3, [pc, #68]	; (8004b5c <xTimerCreateTimerTask+0x54>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00b      	beq.n	8004b36 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8004b1e:	4b10      	ldr	r3, [pc, #64]	; (8004b60 <xTimerCreateTimerTask+0x58>)
 8004b20:	9301      	str	r3, [sp, #4]
 8004b22:	2302      	movs	r3, #2
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	2300      	movs	r3, #0
 8004b28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b2c:	490d      	ldr	r1, [pc, #52]	; (8004b64 <xTimerCreateTimerTask+0x5c>)
 8004b2e:	480e      	ldr	r0, [pc, #56]	; (8004b68 <xTimerCreateTimerTask+0x60>)
 8004b30:	f7ff f844 	bl	8003bbc <xTaskCreate>
 8004b34:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10a      	bne.n	8004b52 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	603b      	str	r3, [r7, #0]
    }
 8004b4e:	bf00      	nop
 8004b50:	e7fe      	b.n	8004b50 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004b52:	687b      	ldr	r3, [r7, #4]
    }
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	20000284 	.word	0x20000284
 8004b60:	20000288 	.word	0x20000288
 8004b64:	080058cc 	.word	0x080058cc
 8004b68:	08004c11 	.word	0x08004c11

08004b6c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004b78:	e008      	b.n	8004b8c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	4413      	add	r3, r2
 8004b82:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	699a      	ldr	r2, [r3, #24]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	18d1      	adds	r1, r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f8dd 	bl	8004d58 <prvInsertTimerInActiveList>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1ea      	bne.n	8004b7a <prvReloadTimer+0xe>
        }
    }
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bba:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <prvProcessExpiredTimer+0x5c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fe fcdb 	bl	8003584 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f7ff ffc3 	bl	8004b6c <prvReloadTimer>
 8004be6:	e008      	b.n	8004bfa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bee:	f023 0301 	bic.w	r3, r3, #1
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	4798      	blx	r3
    }
 8004c02:	bf00      	nop
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	2000027c 	.word	0x2000027c

08004c10 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c18:	f107 0308 	add.w	r3, r7, #8
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 f857 	bl	8004cd0 <prvGetNextExpireTime>
 8004c22:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4619      	mov	r1, r3
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f803 	bl	8004c34 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004c2e:	f000 f8d5 	bl	8004ddc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c32:	e7f1      	b.n	8004c18 <prvTimerTask+0x8>

08004c34 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004c3e:	f7ff f9bf 	bl	8003fc0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c42:	f107 0308 	add.w	r3, r7, #8
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 f866 	bl	8004d18 <prvSampleTimeNow>
 8004c4c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d130      	bne.n	8004cb6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10a      	bne.n	8004c70 <prvProcessTimerOrBlockTask+0x3c>
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d806      	bhi.n	8004c70 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004c62:	f7ff f9bb 	bl	8003fdc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c66:	68f9      	ldr	r1, [r7, #12]
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff ffa1 	bl	8004bb0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004c6e:	e024      	b.n	8004cba <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d008      	beq.n	8004c88 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c76:	4b13      	ldr	r3, [pc, #76]	; (8004cc4 <prvProcessTimerOrBlockTask+0x90>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <prvProcessTimerOrBlockTask+0x50>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <prvProcessTimerOrBlockTask+0x52>
 8004c84:	2300      	movs	r3, #0
 8004c86:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c88:	4b0f      	ldr	r3, [pc, #60]	; (8004cc8 <prvProcessTimerOrBlockTask+0x94>)
 8004c8a:	6818      	ldr	r0, [r3, #0]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	4619      	mov	r1, r3
 8004c96:	f7fe ff5d 	bl	8003b54 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004c9a:	f7ff f99f 	bl	8003fdc <xTaskResumeAll>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10a      	bne.n	8004cba <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004ca4:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <prvProcessTimerOrBlockTask+0x98>)
 8004ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	f3bf 8f6f 	isb	sy
    }
 8004cb4:	e001      	b.n	8004cba <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004cb6:	f7ff f991 	bl	8003fdc <xTaskResumeAll>
    }
 8004cba:	bf00      	nop
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000280 	.word	0x20000280
 8004cc8:	20000284 	.word	0x20000284
 8004ccc:	e000ed04 	.word	0xe000ed04

08004cd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004cd8:	4b0e      	ldr	r3, [pc, #56]	; (8004d14 <prvGetNextExpireTime+0x44>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <prvGetNextExpireTime+0x16>
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	e000      	b.n	8004ce8 <prvGetNextExpireTime+0x18>
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d105      	bne.n	8004d00 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cf4:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <prvGetNextExpireTime+0x44>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	e001      	b.n	8004d04 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004d00:	2300      	movs	r3, #0
 8004d02:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004d04:	68fb      	ldr	r3, [r7, #12]
    }
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	2000027c 	.word	0x2000027c

08004d18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004d20:	f7ff fa58 	bl	80041d4 <xTaskGetTickCount>
 8004d24:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004d26:	4b0b      	ldr	r3, [pc, #44]	; (8004d54 <prvSampleTimeNow+0x3c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d205      	bcs.n	8004d3c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004d30:	f000 f912 	bl	8004f58 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	e002      	b.n	8004d42 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004d42:	4a04      	ldr	r2, [pc, #16]	; (8004d54 <prvSampleTimeNow+0x3c>)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004d48:	68fb      	ldr	r3, [r7, #12]
    }
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	2000028c 	.word	0x2000028c

08004d58 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
 8004d64:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d812      	bhi.n	8004da4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	1ad2      	subs	r2, r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d302      	bcc.n	8004d92 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	e01b      	b.n	8004dca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d92:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <prvInsertTimerInActiveList+0x7c>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	f7fe fbb8 	bl	8003512 <vListInsert>
 8004da2:	e012      	b.n	8004dca <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d206      	bcs.n	8004dba <prvInsertTimerInActiveList+0x62>
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d302      	bcc.n	8004dba <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004db4:	2301      	movs	r3, #1
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	e007      	b.n	8004dca <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dba:	4b07      	ldr	r3, [pc, #28]	; (8004dd8 <prvInsertTimerInActiveList+0x80>)
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	f7fe fba4 	bl	8003512 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004dca:	697b      	ldr	r3, [r7, #20]
    }
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	20000280 	.word	0x20000280
 8004dd8:	2000027c 	.word	0x2000027c

08004ddc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004de2:	e0a6      	b.n	8004f32 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f2c0 80a2 	blt.w	8004f30 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d004      	beq.n	8004e02 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fe fbc1 	bl	8003584 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e02:	1d3b      	adds	r3, r7, #4
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff ff87 	bl	8004d18 <prvSampleTimeNow>
 8004e0a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	f200 808e 	bhi.w	8004f32 <prvProcessReceivedCommands+0x156>
 8004e16:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <prvProcessReceivedCommands+0x40>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e41 	.word	0x08004e41
 8004e20:	08004e41 	.word	0x08004e41
 8004e24:	08004ea9 	.word	0x08004ea9
 8004e28:	08004ebd 	.word	0x08004ebd
 8004e2c:	08004f07 	.word	0x08004f07
 8004e30:	08004e41 	.word	0x08004e41
 8004e34:	08004e41 	.word	0x08004e41
 8004e38:	08004ea9 	.word	0x08004ea9
 8004e3c:	08004ebd 	.word	0x08004ebd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	18d1      	adds	r1, r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	69f8      	ldr	r0, [r7, #28]
 8004e60:	f7ff ff7a 	bl	8004d58 <prvInsertTimerInActiveList>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d063      	beq.n	8004f32 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d009      	beq.n	8004e8c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	4413      	add	r3, r2
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	4619      	mov	r1, r3
 8004e84:	69f8      	ldr	r0, [r7, #28]
 8004e86:	f7ff fe71 	bl	8004b6c <prvReloadTimer>
 8004e8a:	e008      	b.n	8004e9e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e92:	f023 0301 	bic.w	r3, r3, #1
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	69f8      	ldr	r0, [r7, #28]
 8004ea4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004ea6:	e044      	b.n	8004f32 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eae:	f023 0301 	bic.w	r3, r3, #1
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004eba:	e03a      	b.n	8004f32 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ec2:	f043 0301 	orr.w	r3, r3, #1
 8004ec6:	b2da      	uxtb	r2, r3
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	617b      	str	r3, [r7, #20]
    }
 8004eee:	bf00      	nop
 8004ef0:	e7fe      	b.n	8004ef0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	18d1      	adds	r1, r2, r3
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	69f8      	ldr	r0, [r7, #28]
 8004f00:	f7ff ff2a 	bl	8004d58 <prvInsertTimerInActiveList>
                        break;
 8004f04:	e015      	b.n	8004f32 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d103      	bne.n	8004f1c <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8004f14:	69f8      	ldr	r0, [r7, #28]
 8004f16:	f000 fb69 	bl	80055ec <vPortFree>
 8004f1a:	e00a      	b.n	8004f32 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f22:	f023 0301 	bic.w	r3, r3, #1
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004f2e:	e000      	b.n	8004f32 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004f30:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f32:	4b08      	ldr	r3, [pc, #32]	; (8004f54 <prvProcessReceivedCommands+0x178>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f107 0108 	add.w	r1, r7, #8
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7fe fc4d 	bl	80037dc <xQueueReceive>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f47f af4d 	bne.w	8004de4 <prvProcessReceivedCommands+0x8>
        }
    }
 8004f4a:	bf00      	nop
 8004f4c:	bf00      	nop
 8004f4e:	3720      	adds	r7, #32
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	20000284 	.word	0x20000284

08004f58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f5e:	e009      	b.n	8004f74 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f60:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <prvSwitchTimerLists+0x44>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004f6a:	f04f 31ff 	mov.w	r1, #4294967295
 8004f6e:	6838      	ldr	r0, [r7, #0]
 8004f70:	f7ff fe1e 	bl	8004bb0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f74:	4b09      	ldr	r3, [pc, #36]	; (8004f9c <prvSwitchTimerLists+0x44>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f0      	bne.n	8004f60 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004f7e:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <prvSwitchTimerLists+0x44>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004f84:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <prvSwitchTimerLists+0x48>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <prvSwitchTimerLists+0x44>)
 8004f8a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004f8c:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <prvSwitchTimerLists+0x48>)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6013      	str	r3, [r2, #0]
    }
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	2000027c 	.word	0x2000027c
 8004fa0:	20000280 	.word	0x20000280

08004fa4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004fa8:	f000 f95e 	bl	8005268 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004fac:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <prvCheckForValidListAndQueue+0x54>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d11d      	bne.n	8004ff0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004fb4:	4811      	ldr	r0, [pc, #68]	; (8004ffc <prvCheckForValidListAndQueue+0x58>)
 8004fb6:	f7fe fa7f 	bl	80034b8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004fba:	4811      	ldr	r0, [pc, #68]	; (8005000 <prvCheckForValidListAndQueue+0x5c>)
 8004fbc:	f7fe fa7c 	bl	80034b8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004fc0:	4b10      	ldr	r3, [pc, #64]	; (8005004 <prvCheckForValidListAndQueue+0x60>)
 8004fc2:	4a0e      	ldr	r2, [pc, #56]	; (8004ffc <prvCheckForValidListAndQueue+0x58>)
 8004fc4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004fc6:	4b10      	ldr	r3, [pc, #64]	; (8005008 <prvCheckForValidListAndQueue+0x64>)
 8004fc8:	4a0d      	ldr	r2, [pc, #52]	; (8005000 <prvCheckForValidListAndQueue+0x5c>)
 8004fca:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004fcc:	2200      	movs	r2, #0
 8004fce:	210c      	movs	r1, #12
 8004fd0:	200a      	movs	r0, #10
 8004fd2:	f7fe fb91 	bl	80036f8 <xQueueGenericCreate>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	4a07      	ldr	r2, [pc, #28]	; (8004ff8 <prvCheckForValidListAndQueue+0x54>)
 8004fda:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004fdc:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <prvCheckForValidListAndQueue+0x54>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d005      	beq.n	8004ff0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004fe4:	4b04      	ldr	r3, [pc, #16]	; (8004ff8 <prvCheckForValidListAndQueue+0x54>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4908      	ldr	r1, [pc, #32]	; (800500c <prvCheckForValidListAndQueue+0x68>)
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fe fd64 	bl	8003ab8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004ff0:	f000 f96a 	bl	80052c8 <vPortExitCritical>
    }
 8004ff4:	bf00      	nop
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	20000284 	.word	0x20000284
 8004ffc:	20000254 	.word	0x20000254
 8005000:	20000268 	.word	0x20000268
 8005004:	2000027c 	.word	0x2000027c
 8005008:	20000280 	.word	0x20000280
 800500c:	080058d4 	.word	0x080058d4

08005010 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	3b04      	subs	r3, #4
 8005020:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005028:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3b04      	subs	r3, #4
 800502e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f023 0201 	bic.w	r2, r3, #1
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3b04      	subs	r3, #4
 800503e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005040:	4a0c      	ldr	r2, [pc, #48]	; (8005074 <pxPortInitialiseStack+0x64>)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3b14      	subs	r3, #20
 800504a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3b04      	subs	r3, #4
 8005056:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f06f 0202 	mvn.w	r2, #2
 800505e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3b20      	subs	r3, #32
 8005064:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005066:	68fb      	ldr	r3, [r7, #12]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	08005079 	.word	0x08005079

08005078 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800507e:	2300      	movs	r3, #0
 8005080:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005082:	4b12      	ldr	r3, [pc, #72]	; (80050cc <prvTaskExitError+0x54>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508a:	d00a      	beq.n	80050a2 <prvTaskExitError+0x2a>
        __asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	60fb      	str	r3, [r7, #12]
    }
 800509e:	bf00      	nop
 80050a0:	e7fe      	b.n	80050a0 <prvTaskExitError+0x28>
        __asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	60bb      	str	r3, [r7, #8]
    }
 80050b4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80050b6:	bf00      	nop
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0fc      	beq.n	80050b8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80050be:	bf00      	nop
 80050c0:	bf00      	nop
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	20000010 	.word	0x20000010

080050d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80050d0:	4b07      	ldr	r3, [pc, #28]	; (80050f0 <pxCurrentTCBConst2>)
 80050d2:	6819      	ldr	r1, [r3, #0]
 80050d4:	6808      	ldr	r0, [r1, #0]
 80050d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050da:	f380 8809 	msr	PSP, r0
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f04f 0000 	mov.w	r0, #0
 80050e6:	f380 8811 	msr	BASEPRI, r0
 80050ea:	4770      	bx	lr
 80050ec:	f3af 8000 	nop.w

080050f0 <pxCurrentTCBConst2>:
 80050f0:	20000150 	.word	0x20000150
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop

080050f8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80050f8:	4808      	ldr	r0, [pc, #32]	; (800511c <prvPortStartFirstTask+0x24>)
 80050fa:	6800      	ldr	r0, [r0, #0]
 80050fc:	6800      	ldr	r0, [r0, #0]
 80050fe:	f380 8808 	msr	MSP, r0
 8005102:	f04f 0000 	mov.w	r0, #0
 8005106:	f380 8814 	msr	CONTROL, r0
 800510a:	b662      	cpsie	i
 800510c:	b661      	cpsie	f
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	df00      	svc	0
 8005118:	bf00      	nop
 800511a:	0000      	.short	0x0000
 800511c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005120:	bf00      	nop
 8005122:	bf00      	nop

08005124 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800512a:	4b46      	ldr	r3, [pc, #280]	; (8005244 <xPortStartScheduler+0x120>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a46      	ldr	r2, [pc, #280]	; (8005248 <xPortStartScheduler+0x124>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d10a      	bne.n	800514a <xPortStartScheduler+0x26>
        __asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	613b      	str	r3, [r7, #16]
    }
 8005146:	bf00      	nop
 8005148:	e7fe      	b.n	8005148 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800514a:	4b3e      	ldr	r3, [pc, #248]	; (8005244 <xPortStartScheduler+0x120>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a3f      	ldr	r2, [pc, #252]	; (800524c <xPortStartScheduler+0x128>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d10a      	bne.n	800516a <xPortStartScheduler+0x46>
        __asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	60fb      	str	r3, [r7, #12]
    }
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800516a:	4b39      	ldr	r3, [pc, #228]	; (8005250 <xPortStartScheduler+0x12c>)
 800516c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	b2db      	uxtb	r3, r3
 8005174:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	22ff      	movs	r2, #255	; 0xff
 800517a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	b2db      	uxtb	r3, r3
 8005188:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800518c:	b2da      	uxtb	r2, r3
 800518e:	4b31      	ldr	r3, [pc, #196]	; (8005254 <xPortStartScheduler+0x130>)
 8005190:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005192:	4b31      	ldr	r3, [pc, #196]	; (8005258 <xPortStartScheduler+0x134>)
 8005194:	2207      	movs	r2, #7
 8005196:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005198:	e009      	b.n	80051ae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800519a:	4b2f      	ldr	r3, [pc, #188]	; (8005258 <xPortStartScheduler+0x134>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3b01      	subs	r3, #1
 80051a0:	4a2d      	ldr	r2, [pc, #180]	; (8005258 <xPortStartScheduler+0x134>)
 80051a2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	005b      	lsls	r3, r3, #1
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051ae:	78fb      	ldrb	r3, [r7, #3]
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b6:	2b80      	cmp	r3, #128	; 0x80
 80051b8:	d0ef      	beq.n	800519a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80051ba:	4b27      	ldr	r3, [pc, #156]	; (8005258 <xPortStartScheduler+0x134>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f1c3 0307 	rsb	r3, r3, #7
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d00a      	beq.n	80051dc <xPortStartScheduler+0xb8>
        __asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	60bb      	str	r3, [r7, #8]
    }
 80051d8:	bf00      	nop
 80051da:	e7fe      	b.n	80051da <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051dc:	4b1e      	ldr	r3, [pc, #120]	; (8005258 <xPortStartScheduler+0x134>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	4a1d      	ldr	r2, [pc, #116]	; (8005258 <xPortStartScheduler+0x134>)
 80051e4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051e6:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <xPortStartScheduler+0x134>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051ee:	4a1a      	ldr	r2, [pc, #104]	; (8005258 <xPortStartScheduler+0x134>)
 80051f0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80051fa:	4b18      	ldr	r3, [pc, #96]	; (800525c <xPortStartScheduler+0x138>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a17      	ldr	r2, [pc, #92]	; (800525c <xPortStartScheduler+0x138>)
 8005200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005204:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005206:	4b15      	ldr	r3, [pc, #84]	; (800525c <xPortStartScheduler+0x138>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a14      	ldr	r2, [pc, #80]	; (800525c <xPortStartScheduler+0x138>)
 800520c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005210:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005212:	f000 f8db 	bl	80053cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005216:	4b12      	ldr	r3, [pc, #72]	; (8005260 <xPortStartScheduler+0x13c>)
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800521c:	f000 f8fa 	bl	8005414 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005220:	4b10      	ldr	r3, [pc, #64]	; (8005264 <xPortStartScheduler+0x140>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a0f      	ldr	r2, [pc, #60]	; (8005264 <xPortStartScheduler+0x140>)
 8005226:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800522a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800522c:	f7ff ff64 	bl	80050f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005230:	f7ff f8f6 	bl	8004420 <vTaskSwitchContext>
    prvTaskExitError();
 8005234:	f7ff ff20 	bl	8005078 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	e000ed00 	.word	0xe000ed00
 8005248:	410fc271 	.word	0x410fc271
 800524c:	410fc270 	.word	0x410fc270
 8005250:	e000e400 	.word	0xe000e400
 8005254:	20000290 	.word	0x20000290
 8005258:	20000294 	.word	0x20000294
 800525c:	e000ed20 	.word	0xe000ed20
 8005260:	20000010 	.word	0x20000010
 8005264:	e000ef34 	.word	0xe000ef34

08005268 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
        __asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	607b      	str	r3, [r7, #4]
    }
 8005280:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005282:	4b0f      	ldr	r3, [pc, #60]	; (80052c0 <vPortEnterCritical+0x58>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3301      	adds	r3, #1
 8005288:	4a0d      	ldr	r2, [pc, #52]	; (80052c0 <vPortEnterCritical+0x58>)
 800528a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800528c:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <vPortEnterCritical+0x58>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d10f      	bne.n	80052b4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005294:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <vPortEnterCritical+0x5c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <vPortEnterCritical+0x4c>
        __asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	603b      	str	r3, [r7, #0]
    }
 80052b0:	bf00      	nop
 80052b2:	e7fe      	b.n	80052b2 <vPortEnterCritical+0x4a>
    }
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	20000010 	.word	0x20000010
 80052c4:	e000ed04 	.word	0xe000ed04

080052c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80052ce:	4b12      	ldr	r3, [pc, #72]	; (8005318 <vPortExitCritical+0x50>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10a      	bne.n	80052ec <vPortExitCritical+0x24>
        __asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	607b      	str	r3, [r7, #4]
    }
 80052e8:	bf00      	nop
 80052ea:	e7fe      	b.n	80052ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80052ec:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <vPortExitCritical+0x50>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3b01      	subs	r3, #1
 80052f2:	4a09      	ldr	r2, [pc, #36]	; (8005318 <vPortExitCritical+0x50>)
 80052f4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80052f6:	4b08      	ldr	r3, [pc, #32]	; (8005318 <vPortExitCritical+0x50>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d105      	bne.n	800530a <vPortExitCritical+0x42>
 80052fe:	2300      	movs	r3, #0
 8005300:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005308:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	20000010 	.word	0x20000010
 800531c:	00000000 	.word	0x00000000

08005320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005320:	f3ef 8009 	mrs	r0, PSP
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	4b15      	ldr	r3, [pc, #84]	; (8005380 <pxCurrentTCBConst>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	f01e 0f10 	tst.w	lr, #16
 8005330:	bf08      	it	eq
 8005332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533a:	6010      	str	r0, [r2, #0]
 800533c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005344:	f380 8811 	msr	BASEPRI, r0
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f7ff f866 	bl	8004420 <vTaskSwitchContext>
 8005354:	f04f 0000 	mov.w	r0, #0
 8005358:	f380 8811 	msr	BASEPRI, r0
 800535c:	bc09      	pop	{r0, r3}
 800535e:	6819      	ldr	r1, [r3, #0]
 8005360:	6808      	ldr	r0, [r1, #0]
 8005362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005366:	f01e 0f10 	tst.w	lr, #16
 800536a:	bf08      	it	eq
 800536c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005370:	f380 8809 	msr	PSP, r0
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	f3af 8000 	nop.w

08005380 <pxCurrentTCBConst>:
 8005380:	20000150 	.word	0x20000150
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop

08005388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
        __asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	607b      	str	r3, [r7, #4]
    }
 80053a0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80053a2:	f7fe ff27 	bl	80041f4 <xTaskIncrementTick>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053ac:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <SysTick_Handler+0x40>)
 80053ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	2300      	movs	r3, #0
 80053b6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	f383 8811 	msr	BASEPRI, r3
    }
 80053be:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053d0:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <vPortSetupTimerInterrupt+0x34>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053d6:	4b0b      	ldr	r3, [pc, #44]	; (8005404 <vPortSetupTimerInterrupt+0x38>)
 80053d8:	2200      	movs	r2, #0
 80053da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80053dc:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <vPortSetupTimerInterrupt+0x3c>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a0a      	ldr	r2, [pc, #40]	; (800540c <vPortSetupTimerInterrupt+0x40>)
 80053e2:	fba2 2303 	umull	r2, r3, r2, r3
 80053e6:	099b      	lsrs	r3, r3, #6
 80053e8:	4a09      	ldr	r2, [pc, #36]	; (8005410 <vPortSetupTimerInterrupt+0x44>)
 80053ea:	3b01      	subs	r3, #1
 80053ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80053ee:	4b04      	ldr	r3, [pc, #16]	; (8005400 <vPortSetupTimerInterrupt+0x34>)
 80053f0:	2207      	movs	r2, #7
 80053f2:	601a      	str	r2, [r3, #0]
}
 80053f4:	bf00      	nop
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	e000e010 	.word	0xe000e010
 8005404:	e000e018 	.word	0xe000e018
 8005408:	20000000 	.word	0x20000000
 800540c:	10624dd3 	.word	0x10624dd3
 8005410:	e000e014 	.word	0xe000e014

08005414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005424 <vPortEnableVFP+0x10>
 8005418:	6801      	ldr	r1, [r0, #0]
 800541a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800541e:	6001      	str	r1, [r0, #0]
 8005420:	4770      	bx	lr
 8005422:	0000      	.short	0x0000
 8005424:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005428:	bf00      	nop
 800542a:	bf00      	nop

0800542c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08a      	sub	sp, #40	; 0x28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005434:	2300      	movs	r3, #0
 8005436:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005438:	f7fe fdc2 	bl	8003fc0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800543c:	4b65      	ldr	r3, [pc, #404]	; (80055d4 <pvPortMalloc+0x1a8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005444:	f000 f934 	bl	80056b0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005448:	4b63      	ldr	r3, [pc, #396]	; (80055d8 <pvPortMalloc+0x1ac>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4013      	ands	r3, r2
 8005450:	2b00      	cmp	r3, #0
 8005452:	f040 80a7 	bne.w	80055a4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d02d      	beq.n	80054b8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800545c:	2208      	movs	r2, #8
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	429a      	cmp	r2, r3
 8005466:	d227      	bcs.n	80054b8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005468:	2208      	movs	r2, #8
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4413      	add	r3, r2
 800546e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	2b00      	cmp	r3, #0
 8005478:	d021      	beq.n	80054be <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f023 0307 	bic.w	r3, r3, #7
 8005480:	3308      	adds	r3, #8
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	d214      	bcs.n	80054b2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f023 0307 	bic.w	r3, r3, #7
 800548e:	3308      	adds	r3, #8
 8005490:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	2b00      	cmp	r3, #0
 800549a:	d010      	beq.n	80054be <pvPortMalloc+0x92>
        __asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	617b      	str	r3, [r7, #20]
    }
 80054ae:	bf00      	nop
 80054b0:	e7fe      	b.n	80054b0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80054b2:	2300      	movs	r3, #0
 80054b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054b6:	e002      	b.n	80054be <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	607b      	str	r3, [r7, #4]
 80054bc:	e000      	b.n	80054c0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054be:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d06e      	beq.n	80055a4 <pvPortMalloc+0x178>
 80054c6:	4b45      	ldr	r3, [pc, #276]	; (80055dc <pvPortMalloc+0x1b0>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d869      	bhi.n	80055a4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80054d0:	4b43      	ldr	r3, [pc, #268]	; (80055e0 <pvPortMalloc+0x1b4>)
 80054d2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80054d4:	4b42      	ldr	r3, [pc, #264]	; (80055e0 <pvPortMalloc+0x1b4>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054da:	e004      	b.n	80054e6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80054e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d903      	bls.n	80054f8 <pvPortMalloc+0xcc>
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1f1      	bne.n	80054dc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80054f8:	4b36      	ldr	r3, [pc, #216]	; (80055d4 <pvPortMalloc+0x1a8>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fe:	429a      	cmp	r2, r3
 8005500:	d050      	beq.n	80055a4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2208      	movs	r2, #8
 8005508:	4413      	add	r3, r2
 800550a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	1ad2      	subs	r2, r2, r3
 800551c:	2308      	movs	r3, #8
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	429a      	cmp	r2, r3
 8005522:	d91f      	bls.n	8005564 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4413      	add	r3, r2
 800552a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <pvPortMalloc+0x120>
        __asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	613b      	str	r3, [r7, #16]
    }
 8005548:	bf00      	nop
 800554a:	e7fe      	b.n	800554a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	1ad2      	subs	r2, r2, r3
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800555e:	69b8      	ldr	r0, [r7, #24]
 8005560:	f000 f908 	bl	8005774 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005564:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <pvPortMalloc+0x1b0>)
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	4a1b      	ldr	r2, [pc, #108]	; (80055dc <pvPortMalloc+0x1b0>)
 8005570:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005572:	4b1a      	ldr	r3, [pc, #104]	; (80055dc <pvPortMalloc+0x1b0>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	4b1b      	ldr	r3, [pc, #108]	; (80055e4 <pvPortMalloc+0x1b8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d203      	bcs.n	8005586 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800557e:	4b17      	ldr	r3, [pc, #92]	; (80055dc <pvPortMalloc+0x1b0>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a18      	ldr	r2, [pc, #96]	; (80055e4 <pvPortMalloc+0x1b8>)
 8005584:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	4b13      	ldr	r3, [pc, #76]	; (80055d8 <pvPortMalloc+0x1ac>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	431a      	orrs	r2, r3
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800559a:	4b13      	ldr	r3, [pc, #76]	; (80055e8 <pvPortMalloc+0x1bc>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3301      	adds	r3, #1
 80055a0:	4a11      	ldr	r2, [pc, #68]	; (80055e8 <pvPortMalloc+0x1bc>)
 80055a2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80055a4:	f7fe fd1a 	bl	8003fdc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <pvPortMalloc+0x19c>
        __asm volatile
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	60fb      	str	r3, [r7, #12]
    }
 80055c4:	bf00      	nop
 80055c6:	e7fe      	b.n	80055c6 <pvPortMalloc+0x19a>
    return pvReturn;
 80055c8:	69fb      	ldr	r3, [r7, #28]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3728      	adds	r7, #40	; 0x28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20012ea0 	.word	0x20012ea0
 80055d8:	20012eb4 	.word	0x20012eb4
 80055dc:	20012ea4 	.word	0x20012ea4
 80055e0:	20012e98 	.word	0x20012e98
 80055e4:	20012ea8 	.word	0x20012ea8
 80055e8:	20012eac 	.word	0x20012eac

080055ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d04d      	beq.n	800569a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80055fe:	2308      	movs	r3, #8
 8005600:	425b      	negs	r3, r3
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	4413      	add	r3, r2
 8005606:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	4b24      	ldr	r3, [pc, #144]	; (80056a4 <vPortFree+0xb8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4013      	ands	r3, r2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10a      	bne.n	8005630 <vPortFree+0x44>
        __asm volatile
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	60fb      	str	r3, [r7, #12]
    }
 800562c:	bf00      	nop
 800562e:	e7fe      	b.n	800562e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <vPortFree+0x62>
        __asm volatile
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	f383 8811 	msr	BASEPRI, r3
 8005640:	f3bf 8f6f 	isb	sy
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	60bb      	str	r3, [r7, #8]
    }
 800564a:	bf00      	nop
 800564c:	e7fe      	b.n	800564c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	4b14      	ldr	r3, [pc, #80]	; (80056a4 <vPortFree+0xb8>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4013      	ands	r3, r2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d01e      	beq.n	800569a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d11a      	bne.n	800569a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	4b0e      	ldr	r3, [pc, #56]	; (80056a4 <vPortFree+0xb8>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	43db      	mvns	r3, r3
 800566e:	401a      	ands	r2, r3
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005674:	f7fe fca4 	bl	8003fc0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <vPortFree+0xbc>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4413      	add	r3, r2
 8005682:	4a09      	ldr	r2, [pc, #36]	; (80056a8 <vPortFree+0xbc>)
 8005684:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005686:	6938      	ldr	r0, [r7, #16]
 8005688:	f000 f874 	bl	8005774 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800568c:	4b07      	ldr	r3, [pc, #28]	; (80056ac <vPortFree+0xc0>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3301      	adds	r3, #1
 8005692:	4a06      	ldr	r2, [pc, #24]	; (80056ac <vPortFree+0xc0>)
 8005694:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005696:	f7fe fca1 	bl	8003fdc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800569a:	bf00      	nop
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20012eb4 	.word	0x20012eb4
 80056a8:	20012ea4 	.word	0x20012ea4
 80056ac:	20012eb0 	.word	0x20012eb0

080056b0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056b6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80056ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80056bc:	4b27      	ldr	r3, [pc, #156]	; (800575c <prvHeapInit+0xac>)
 80056be:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f003 0307 	and.w	r3, r3, #7
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00c      	beq.n	80056e4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3307      	adds	r3, #7
 80056ce:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f023 0307 	bic.w	r3, r3, #7
 80056d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	4a1f      	ldr	r2, [pc, #124]	; (800575c <prvHeapInit+0xac>)
 80056e0:	4413      	add	r3, r2
 80056e2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056e8:	4a1d      	ldr	r2, [pc, #116]	; (8005760 <prvHeapInit+0xb0>)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80056ee:	4b1c      	ldr	r3, [pc, #112]	; (8005760 <prvHeapInit+0xb0>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	4413      	add	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80056fc:	2208      	movs	r2, #8
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1a9b      	subs	r3, r3, r2
 8005702:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0307 	bic.w	r3, r3, #7
 800570a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4a15      	ldr	r2, [pc, #84]	; (8005764 <prvHeapInit+0xb4>)
 8005710:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005712:	4b14      	ldr	r3, [pc, #80]	; (8005764 <prvHeapInit+0xb4>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2200      	movs	r2, #0
 8005718:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800571a:	4b12      	ldr	r3, [pc, #72]	; (8005764 <prvHeapInit+0xb4>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	1ad2      	subs	r2, r2, r3
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005730:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <prvHeapInit+0xb4>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	4a0a      	ldr	r2, [pc, #40]	; (8005768 <prvHeapInit+0xb8>)
 800573e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	4a09      	ldr	r2, [pc, #36]	; (800576c <prvHeapInit+0xbc>)
 8005746:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005748:	4b09      	ldr	r3, [pc, #36]	; (8005770 <prvHeapInit+0xc0>)
 800574a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800574e:	601a      	str	r2, [r3, #0]
}
 8005750:	bf00      	nop
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	20000298 	.word	0x20000298
 8005760:	20012e98 	.word	0x20012e98
 8005764:	20012ea0 	.word	0x20012ea0
 8005768:	20012ea8 	.word	0x20012ea8
 800576c:	20012ea4 	.word	0x20012ea4
 8005770:	20012eb4 	.word	0x20012eb4

08005774 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800577c:	4b28      	ldr	r3, [pc, #160]	; (8005820 <prvInsertBlockIntoFreeList+0xac>)
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	e002      	b.n	8005788 <prvInsertBlockIntoFreeList+0x14>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	429a      	cmp	r2, r3
 8005790:	d8f7      	bhi.n	8005782 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	4413      	add	r3, r2
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d108      	bne.n	80057b6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	441a      	add	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	441a      	add	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d118      	bne.n	80057fc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	4b15      	ldr	r3, [pc, #84]	; (8005824 <prvInsertBlockIntoFreeList+0xb0>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d00d      	beq.n	80057f2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	441a      	add	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	e008      	b.n	8005804 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057f2:	4b0c      	ldr	r3, [pc, #48]	; (8005824 <prvInsertBlockIntoFreeList+0xb0>)
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	e003      	b.n	8005804 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	429a      	cmp	r2, r3
 800580a:	d002      	beq.n	8005812 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005812:	bf00      	nop
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	20012e98 	.word	0x20012e98
 8005824:	20012ea0 	.word	0x20012ea0

08005828 <__libc_init_array>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	4d0d      	ldr	r5, [pc, #52]	; (8005860 <__libc_init_array+0x38>)
 800582c:	4c0d      	ldr	r4, [pc, #52]	; (8005864 <__libc_init_array+0x3c>)
 800582e:	1b64      	subs	r4, r4, r5
 8005830:	10a4      	asrs	r4, r4, #2
 8005832:	2600      	movs	r6, #0
 8005834:	42a6      	cmp	r6, r4
 8005836:	d109      	bne.n	800584c <__libc_init_array+0x24>
 8005838:	4d0b      	ldr	r5, [pc, #44]	; (8005868 <__libc_init_array+0x40>)
 800583a:	4c0c      	ldr	r4, [pc, #48]	; (800586c <__libc_init_array+0x44>)
 800583c:	f000 f82e 	bl	800589c <_init>
 8005840:	1b64      	subs	r4, r4, r5
 8005842:	10a4      	asrs	r4, r4, #2
 8005844:	2600      	movs	r6, #0
 8005846:	42a6      	cmp	r6, r4
 8005848:	d105      	bne.n	8005856 <__libc_init_array+0x2e>
 800584a:	bd70      	pop	{r4, r5, r6, pc}
 800584c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005850:	4798      	blx	r3
 8005852:	3601      	adds	r6, #1
 8005854:	e7ee      	b.n	8005834 <__libc_init_array+0xc>
 8005856:	f855 3b04 	ldr.w	r3, [r5], #4
 800585a:	4798      	blx	r3
 800585c:	3601      	adds	r6, #1
 800585e:	e7f2      	b.n	8005846 <__libc_init_array+0x1e>
 8005860:	080058fc 	.word	0x080058fc
 8005864:	080058fc 	.word	0x080058fc
 8005868:	080058fc 	.word	0x080058fc
 800586c:	08005900 	.word	0x08005900

08005870 <memcpy>:
 8005870:	440a      	add	r2, r1
 8005872:	4291      	cmp	r1, r2
 8005874:	f100 33ff 	add.w	r3, r0, #4294967295
 8005878:	d100      	bne.n	800587c <memcpy+0xc>
 800587a:	4770      	bx	lr
 800587c:	b510      	push	{r4, lr}
 800587e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005882:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005886:	4291      	cmp	r1, r2
 8005888:	d1f9      	bne.n	800587e <memcpy+0xe>
 800588a:	bd10      	pop	{r4, pc}

0800588c <memset>:
 800588c:	4402      	add	r2, r0
 800588e:	4603      	mov	r3, r0
 8005890:	4293      	cmp	r3, r2
 8005892:	d100      	bne.n	8005896 <memset+0xa>
 8005894:	4770      	bx	lr
 8005896:	f803 1b01 	strb.w	r1, [r3], #1
 800589a:	e7f9      	b.n	8005890 <memset+0x4>

0800589c <_init>:
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	bf00      	nop
 80058a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a2:	bc08      	pop	{r3}
 80058a4:	469e      	mov	lr, r3
 80058a6:	4770      	bx	lr

080058a8 <_fini>:
 80058a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058aa:	bf00      	nop
 80058ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ae:	bc08      	pop	{r3}
 80058b0:	469e      	mov	lr, r3
 80058b2:	4770      	bx	lr
